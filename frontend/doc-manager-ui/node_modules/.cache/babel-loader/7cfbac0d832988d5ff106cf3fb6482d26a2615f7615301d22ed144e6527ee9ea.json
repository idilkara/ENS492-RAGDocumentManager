{"ast":null,"code":"/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *     ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *       ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","map":{"version":3,"names":["factorySpace","markdownLineEnding","markdownSpace","blankLine","partial","tokenize","tokenizeBlankLine","effects","ok","nok","start","code","after"],"sources":["C:/Users/LENOVO/OneDrive/Masa√ºst√º/Bitirme/bitirme/frontend/doc-manager-ui/node_modules/micromark-core-commonmark/lib/blank-line.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/** @type {Construct} */\r\nexport const blankLine = {\r\n  partial: true,\r\n  tokenize: tokenizeBlankLine\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeBlankLine(effects, ok, nok) {\r\n  return start;\r\n\r\n  /**\r\n   * Start of blank line.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *     ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\r\n  }\r\n\r\n  /**\r\n   * At eof/eol, after optional whitespace.\r\n   *\r\n   * > üëâ **Note**: `‚ê†` represents a space character.\r\n   *\r\n   * ```markdown\r\n   * > | ‚ê†‚ê†‚êä\r\n   *       ^\r\n   * > | ‚êä\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAY,QAAQ,yBAAyB;AACtD,SAASC,kBAAkB,EAAEC,aAAa,QAAQ,0BAA0B;AAC5E;AACA,OAAO,MAAMC,SAAS,GAAG;EACvBC,OAAO,EAAE,IAAI;EACbC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASA,iBAAiBA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EAC3C,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnB,OAAOT,aAAa,CAACS,IAAI,CAAC,GAAGX,YAAY,CAACO,OAAO,EAAEK,KAAK,EAAE,YAAY,CAAC,CAACD,IAAI,CAAC,GAAGC,KAAK,CAACD,IAAI,CAAC;EAC7F;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,KAAKA,CAACD,IAAI,EAAE;IACnB,OAAOA,IAAI,KAAK,IAAI,IAAIV,kBAAkB,CAACU,IAAI,CAAC,GAAGH,EAAE,CAACG,IAAI,CAAC,GAAGF,GAAG,CAACE,IAAI,CAAC;EACzE;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
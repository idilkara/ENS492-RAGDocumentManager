{"ast":null,"code":"/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","map":{"version":3,"names":["decodeNumericCharacterReference","value","base","code","Number","parseInt","String","fromCodePoint"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/Bitirme/bitirme/frontend/doc-manager-ui/node_modules/micromark-util-decode-numeric-character-reference/index.js"],"sourcesContent":["/**\r\n * Turn the number (in string form as either hexa- or plain decimal) coming from\r\n * a numeric character reference into a character.\r\n *\r\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\r\n * non-characters and control characters safe.\r\n *\r\n * @param {string} value\r\n *   Value to decode.\r\n * @param {number} base\r\n *   Numeric base.\r\n * @returns {string}\r\n *   Character.\r\n */\r\nexport function decodeNumericCharacterReference(value, base) {\r\n  const code = Number.parseInt(value, base);\r\n  if (\r\n  // C0 except for HT, LF, FF, CR, space.\r\n  code < 9 || code === 11 || code > 13 && code < 32 ||\r\n  // Control character (DEL) of C0, and C1 controls.\r\n  code > 126 && code < 160 ||\r\n  // Lone high surrogates and low surrogates.\r\n  code > 55_295 && code < 57_344 ||\r\n  // Noncharacters.\r\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\r\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\r\n  // Out of range\r\n  code > 1_114_111) {\r\n    return \"\\uFFFD\";\r\n  }\r\n  return String.fromCodePoint(code);\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASA,+BAA+BA,CAACC,KAAK,EAAEC,IAAI,EAAE;EAC3D,MAAMC,IAAI,GAAGC,MAAM,CAACC,QAAQ,CAACJ,KAAK,EAAEC,IAAI,CAAC;EACzC;EACA;EACAC,IAAI,GAAG,CAAC,IAAIA,IAAI,KAAK,EAAE,IAAIA,IAAI,GAAG,EAAE,IAAIA,IAAI,GAAG,EAAE;EACjD;EACAA,IAAI,GAAG,GAAG,IAAIA,IAAI,GAAG,GAAG;EACxB;EACAA,IAAI,GAAG,MAAM,IAAIA,IAAI,GAAG,MAAM;EAC9B;EACAA,IAAI,GAAG,MAAM,IAAIA,IAAI,GAAG,MAAM,IAAI;EAClC,CAACA,IAAI,GAAG,MAAM,MAAM,MAAM,IAAI,CAACA,IAAI,GAAG,MAAM,MAAM,MAAM,IAAI;EAC5D;EACAA,IAAI,GAAG,SAAS,EAAE;IAChB,OAAO,QAAQ;EACjB;EACA,OAAOG,MAAM,CAACC,aAAa,CAACJ,IAAI,CAAC;AACnC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
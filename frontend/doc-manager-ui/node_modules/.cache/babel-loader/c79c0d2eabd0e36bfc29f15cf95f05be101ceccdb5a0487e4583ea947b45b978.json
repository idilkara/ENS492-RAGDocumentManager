{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Main.css';\nimport SidePanel from './sidepanel'; // Import the SidePanel component\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\nimport config from \"../config\";\nimport DocumentManagement from './documentManagement.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [chatID, setChatID] = useState(null);\n  const [sessions, setSessions] = useState([]);\n  const [chats, setChats] = useState({});\n  const [selectedOption, setSelectedOption] = useState(0);\n  useEffect(() => {\n    // Fetch user sessions when the component mounts\n    fetchUserSessions();\n  }, []);\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/get_user_sessions?user_id=1`);\n      const data = await response.json();\n      setSessions(data);\n      if (chatID > 0) {\n        //const firstSessionId = data[0].session_id;\n        setChatID(chatID);\n\n        // Immediately fetch the chat history for the first session\n        await fetchChatSession(chatID);\n      }\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n    }\n  };\n  const handleChatIDChange = async newChatID => {\n    if (newChatID === \"NONE\") {\n      await createNewChatSession();\n    } else {\n      setChatID(newChatID);\n      await fetchChatSession(newChatID);\n    }\n  };\n  const createNewChatSession = async () => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/create_chat_session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: '1'\n        })\n      });\n      const data = await response.json();\n\n      // Update sessions list\n      const newSession = {\n        user_id: '1',\n        session_id: data.session_id,\n        created_at: new Date().toISOString()\n      };\n      setSessions([...sessions, newSession]);\n\n      // Set the new chat ID and initialize its chat history\n      setChatID(data.session_id);\n      setChats(prev => ({\n        ...prev,\n        [data.session_id]: []\n      }));\n    } catch (error) {\n      console.error('Error creating new chat session:', error);\n    }\n  };\n  const fetchChatSession = async sessionID => {\n    try {\n      const response = await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=1&session_id=${sessionID}`);\n      const data = await response.json();\n\n      // Convert backend conversation to frontend message format\n      const formattedMessages = data.map((msg, index) => [{\n        id: index * 2,\n        text: msg.user_query,\n        isBot: false\n      }, {\n        id: index * 2 + 1,\n        text: msg.agent_response,\n        isBot: true\n      }]).flat();\n\n      // Update chats state with formatted messages\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: formattedMessages\n      }));\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n      // Ensure an empty array is set if fetch fails\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: []\n      }));\n    }\n  };\n  const renderRightPanel = () => {\n    switch (selectedOption) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 16\n        }, this);\n      case 1:\n        return /*#__PURE__*/_jsxDEV(DocumentManagement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 16\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 16\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: /*#__PURE__*/_jsxDEV(SidePanel, {\n        chatID: chatID,\n        setChatID: handleChatIDChange,\n        sessions: sessions,\n        fetchUserSessions: fetchUserSessions,\n        selectedOption: selectedOption,\n        setSelectedOption: setSelectedOption // Pass state setter to SidePanel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: renderRightPanel()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 7\n  }, this);\n};\n_s(Main, \"F+i+ss6YLkLUQyzB9Q/MftvBIqc=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","SidePanel","ChatbotUI","config","DocumentManagement","jsxDEV","_jsxDEV","Main","_s","chatID","setChatID","sessions","setSessions","chats","setChats","selectedOption","setSelectedOption","fetchUserSessions","response","fetch","API_BASE_URL","data","json","fetchChatSession","error","console","handleChatIDChange","newChatID","createNewChatSession","method","headers","body","JSON","stringify","user_id","newSession","session_id","created_at","Date","toISOString","prev","sessionID","formattedMessages","map","msg","index","id","text","user_query","isBot","agent_response","flat","renderRightPanel","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/frontend/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Main.css';\r\nimport SidePanel from './sidepanel'; // Import the SidePanel component\r\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\r\nimport config from \"../config\";\r\n\r\nimport DocumentManagement from './documentManagement.js'\r\n\r\n\r\nconst Main = () => {\r\n  const [chatID, setChatID] = useState(null);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [chats, setChats] = useState({});\r\n  const [selectedOption, setSelectedOption] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n      // Fetch user sessions when the component mounts\r\n      fetchUserSessions();\r\n  }, []);\r\n\r\n  const fetchUserSessions = async () => {\r\n      try {\r\n        const response = await fetch(`${config.API_BASE_URL}/get_user_sessions?user_id=1`);\r\n          const data = await response.json();\r\n          setSessions(data);\r\n          \r\n          if (chatID > 0) {\r\n              //const firstSessionId = data[0].session_id;\r\n              setChatID(chatID);\r\n              \r\n              // Immediately fetch the chat history for the first session\r\n              await fetchChatSession(chatID);\r\n          }\r\n      } catch (error) {\r\n          console.error('Error fetching user sessions:', error);\r\n      }\r\n  };\r\n\r\n  const handleChatIDChange = async (newChatID) => {\r\n      if (newChatID === \"NONE\") {\r\n          await createNewChatSession();\r\n      } else {\r\n          setChatID(newChatID);\r\n          await fetchChatSession(newChatID);\r\n      }\r\n  };\r\n\r\n  const createNewChatSession = async () => {\r\n      try {\r\n          const response = await fetch(`${config.API_BASE_URL}/create_chat_session`, {\r\n              method: 'POST',\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ user_id: '1' }),\r\n          });\r\n          const data = await response.json();\r\n          \r\n          // Update sessions list\r\n          const newSession = { \r\n              user_id: '1', \r\n              session_id: data.session_id, \r\n              created_at: new Date().toISOString() \r\n          };\r\n          setSessions([...sessions, newSession]);\r\n          \r\n          // Set the new chat ID and initialize its chat history\r\n          setChatID(data.session_id);\r\n          setChats(prev => ({ ...prev, [data.session_id]: [] }));\r\n      } catch (error) {\r\n          console.error('Error creating new chat session:', error);\r\n      }\r\n  };\r\n\r\n  const fetchChatSession = async (sessionID) => {\r\n      try {\r\n          const response = await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=1&session_id=${sessionID}`);\r\n          const data = await response.json();\r\n          \r\n          // Convert backend conversation to frontend message format\r\n          const formattedMessages = data.map((msg, index) => [\r\n              { \r\n                  id: index * 2, \r\n                  text: msg.user_query, \r\n                  isBot: false \r\n              },\r\n              { \r\n                  id: index * 2 + 1, \r\n                  text: msg.agent_response, \r\n                  isBot: true \r\n              }\r\n          ]).flat();\r\n\r\n          // Update chats state with formatted messages\r\n          setChats(prev => ({ ...prev, [sessionID]: formattedMessages }));\r\n      } catch (error) {\r\n          console.error('Error fetching chat session:', error);\r\n          // Ensure an empty array is set if fetch fails\r\n          setChats(prev => ({ ...prev, [sessionID]: [] }));\r\n      }\r\n  };\r\n\r\n  const renderRightPanel = () => {\r\n    switch (selectedOption) {\r\n      case 0:\r\n        return <ChatbotUI chatID={chatID} chats={chats} />;\r\n      case 1:\r\n        return <DocumentManagement />;\r\n      case 2:\r\n        return <ChatbotUI chatID={chatID} chats={chats} />;\r\n      default:\r\n        return <ChatbotUI chatID={chatID} chats={chats} />;\r\n    }\r\n};\r\n\r\n  return (\r\n      <div className=\"main-container\">\r\n          <div className=\"left-panel\">\r\n              <SidePanel \r\n                  chatID={chatID} \r\n                  setChatID={handleChatIDChange} \r\n                  sessions={sessions} \r\n                  fetchUserSessions={fetchUserSessions}\r\n\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption} // Pass state setter to SidePanel\r\n\r\n              />\r\n          </div>\r\n          <div className=\"right-panel\">\r\n              {renderRightPanel()} \r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Main;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\aydin\\\\Desktop\\\\frontend\\\\ENS491-SUDoc\\\\doc-manager-ui\\\\src\\\\pages\\\\side-panel-options\\\\sidepanelupload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './sidepanelupload.css'; // Import the CSS file for styling\nimport config from \"../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [uploadStatus, setUploadStatus] = useState(null); // State to track upload success or error\n  const [isUploading, setIsUploading] = useState(false);\n  const handleFileUpload = async event => {\n    const file = event.target.files[0];\n    console.log(\"File selected:\", file);\n    if (file && file.type === 'application/pdf') {\n      try {\n        setIsUploading(true); // Start uploading state\n        console.log('Uploading started...');\n        const formData = new FormData();\n        formData.append('file', file);\n        const response = await fetch(`${config.API_BASE_URL}/upload`, {\n          method: 'POST',\n          body: formData\n        });\n        const result = await response.json();\n        console.log('Upload result:', result);\n        if (response.ok) {\n          setUploadStatus({\n            success: true,\n            message: result.message\n          });\n        } else {\n          setUploadStatus({\n            success: false,\n            message: result.error || 'Error uploading the file'\n          });\n        }\n      } catch (error) {\n        console.error('Error uploading file:', error);\n        setUploadStatus({\n          success: false,\n          message: 'Failed to upload file'\n        });\n      } finally {\n        setIsUploading(false); // End uploading state\n      }\n    } else {\n      setUploadStatus({\n        success: false,\n        message: 'Please upload a valid PDF file.'\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"upload-button\",\n      children: [isUploading ? 'Uploading...' : 'Choose PDF', /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: handleFileUpload,\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `upload-feedback ${uploadStatus.success ? 'success' : 'error'}`,\n      children: uploadStatus.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"h2mc94/VLCJztOAAA2n75c2Blas=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","config","jsxDEV","_jsxDEV","FileUpload","_s","uploadStatus","setUploadStatus","isUploading","setIsUploading","handleFileUpload","event","file","target","files","console","log","type","formData","FormData","append","response","fetch","API_BASE_URL","method","body","result","json","ok","success","message","error","className","children","accept","onChange","hidden","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/aydin/Desktop/frontend/ENS491-SUDoc/doc-manager-ui/src/pages/side-panel-options/sidepanelupload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './sidepanelupload.css'; // Import the CSS file for styling\r\nimport config from \"../../config\";\r\n\r\nconst FileUpload = () => {\r\n  const [uploadStatus, setUploadStatus] = useState(null); // State to track upload success or error\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const file = event.target.files[0];\r\n    console.log(\"File selected:\", file);\r\n\r\n    if (file && file.type === 'application/pdf') {\r\n      try {\r\n        setIsUploading(true); // Start uploading state\r\n        console.log('Uploading started...');\r\n\r\n        const formData = new FormData();\r\n        formData.append('file', file);\r\n\r\n        const response = await fetch(`${config.API_BASE_URL}/upload`, {\r\n          method: 'POST',\r\n          body: formData,\r\n        });\r\n\r\n        const result = await response.json();\r\n        console.log('Upload result:', result);\r\n\r\n        if (response.ok) {\r\n          setUploadStatus({ success: true, message: result.message });\r\n        } else {\r\n          setUploadStatus({ success: false, message: result.error || 'Error uploading the file' });\r\n        }\r\n      } catch (error) {\r\n        console.error('Error uploading file:', error);\r\n        setUploadStatus({ success: false, message: 'Failed to upload file' });\r\n      } finally {\r\n        setIsUploading(false); // End uploading state\r\n      }\r\n    } else {\r\n      setUploadStatus({ success: false, message: 'Please upload a valid PDF file.' });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"file-upload-container\">\r\n\r\n      <label className=\"upload-button\">\r\n        {isUploading ? 'Uploading...' : 'Choose PDF'}\r\n        <input type=\"file\" accept=\"application/pdf\" onChange={handleFileUpload} hidden />\r\n      </label>\r\n\r\n      {/* Feedback message */}\r\n      {uploadStatus && (\r\n        <div\r\n          className={`upload-feedback ${uploadStatus.success ? 'success' : 'error'}`}\r\n        >\r\n          {uploadStatus.message}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n \r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
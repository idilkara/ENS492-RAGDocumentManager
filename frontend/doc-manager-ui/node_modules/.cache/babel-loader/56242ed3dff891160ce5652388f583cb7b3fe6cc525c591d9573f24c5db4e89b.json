{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Main.css';\nimport SidePanel from './sidepanel'; // Import the SidePanel component\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\nimport config from \"../config\";\nimport apiFetch from '../api';\nimport DocumentManagement from './documentManagement.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [chatID, setChatID] = useState(null);\n  const [sessions, setSessions] = useState([]);\n  const [chats, setChats] = useState({});\n  const [selectedOption, setSelectedOption] = useState(0);\n  useEffect(() => {\n    // Fetch user sessions when the component mounts\n    fetchUserSessions();\n  }, []);\n\n  /*useEffect(() => {\r\n      fetchUserSessions();\r\n  }, [chatID, chats]);\r\n  */\n\n  const fetchUserSessions = async () => {\n    try {\n      const userId = localStorage.getItem(\"userId\");\n      const data = await apiFetch(`${config.API_BASE_URL}/get_user_sessions?user_id=${userId}`);\n      setSessions(data);\n      if (chatID && sessions.some(session => session.session_id === chatID)) {\n        //const firstSessionId = data[0].session_id;\n        setChatID(chatID);\n\n        // Immediately fetch the chat history for the first session\n        await fetchChatSession(chatID);\n      }\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n    }\n  };\n  const handleChatIDChange = async newChatID => {\n    if (newChatID === \"NONE\") {\n      await createNewChatSession();\n    } else {\n      setChatID(newChatID);\n      await fetchChatSession(newChatID);\n    }\n  };\n  const createNewChatSession = async () => {\n    try {\n      const userId = localStorage.getItem(\"userId\");\n      const data = await apiFetch(`${config.API_BASE_URL}/create_chat_session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: userId\n        })\n      });\n      const newSession = {\n        user_id: userId,\n        session_id: data.session_id,\n        created_at: new Date().toISOString()\n      };\n      setSessions(prevSessions => [...prevSessions, newSession]);\n      setChatID(data.session_id); // Update state with new chat session\n      setChats(prev => ({\n        ...prev,\n        [data.session_id]: []\n      }));\n      return data.session_id; // Return new session ID\n    } catch (error) {\n      console.error('Error creating new chat session:', error);\n      return null;\n    }\n  };\n  const fetchChatSession = async sessionID => {\n    try {\n      const userId = localStorage.getItem(\"userId\");\n      if (sessionID === null) return; // null check yoktu ve sorun cikariyordu, ekledim umarim sorun cikarmaz :D\n\n      const token = localStorage.getItem('authToken');\n      const response = await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=${userId}&session_id=${sessionID}`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const data = await response.json();\n      console.log(\"fetchChatSession datası!!!!!: \", data);\n\n      // Convert backend conversation to frontend message format\n      const formattedMessages = data.map((msg, index) => {\n        const messageArray = [{\n          id: index * 2,\n          text: msg.user_query,\n          isBot: false\n        }, {\n          id: index * 2 + 1,\n          text: msg.agent_response,\n          isBot: true,\n          sources: msg.highlighted_pdf\n        }];\n        return messageArray;\n      }).flat();\n\n      // Update chats state with formatted messages\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: formattedMessages\n      }));\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n      // Ensure an empty array is set if fetch fails\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: []\n      }));\n    }\n  };\n  const renderRightPanel = () => {\n    switch (selectedOption) {\n      case 0:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats,\n          setChats: setChats,\n          setChatID: setChatID,\n          createNewChatSession: createNewChatSession\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 16\n        }, this);\n      case 1:\n        return /*#__PURE__*/_jsxDEV(DocumentManagement, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 16\n        }, this);\n      case 2:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats,\n          setChats: setChats,\n          setChatID: setChatID,\n          createNewChatSession: createNewChatSession\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 17\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(ChatbotUI, {\n          chatID: chatID,\n          chats: chats,\n          setChats: setChats,\n          setChatID: setChatID,\n          createNewChatSession: createNewChatSession\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 17\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: /*#__PURE__*/_jsxDEV(SidePanel, {\n        chatID: chatID,\n        setChatID: handleChatIDChange,\n        sessions: sessions,\n        fetchUserSessions: fetchUserSessions,\n        selectedOption: selectedOption,\n        setSelectedOption: setSelectedOption // Pass state setter to SidePanel\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: renderRightPanel()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 7\n  }, this);\n};\n_s(Main, \"F+i+ss6YLkLUQyzB9Q/MftvBIqc=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","SidePanel","ChatbotUI","config","apiFetch","DocumentManagement","jsxDEV","_jsxDEV","Main","_s","chatID","setChatID","sessions","setSessions","chats","setChats","selectedOption","setSelectedOption","fetchUserSessions","userId","localStorage","getItem","data","API_BASE_URL","some","session","session_id","fetchChatSession","error","console","handleChatIDChange","newChatID","createNewChatSession","method","headers","body","JSON","stringify","user_id","newSession","created_at","Date","toISOString","prevSessions","prev","sessionID","token","response","fetch","json","log","formattedMessages","map","msg","index","messageArray","id","text","user_query","isBot","agent_response","sources","highlighted_pdf","flat","renderRightPanel","fileName","_jsxFileName","lineNumber","columnNumber","className","children","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Main.css';\r\nimport SidePanel from './sidepanel'; // Import the SidePanel component\r\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\r\nimport config from \"../config\";\r\nimport apiFetch from '../api';  \r\n\r\n\r\nimport DocumentManagement from './documentManagement.js'\r\n\r\n\r\nconst Main = () => {\r\n  const [chatID, setChatID] = useState(null);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [chats, setChats] = useState({});\r\n  const [selectedOption, setSelectedOption] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n      // Fetch user sessions when the component mounts\r\n      fetchUserSessions();\r\n  }, []);\r\n\r\n    /*useEffect(() => {\r\n        fetchUserSessions();\r\n    }, [chatID, chats]);\r\n  */\r\n\r\n  const fetchUserSessions = async () => {\r\n      try {\r\n          const userId = localStorage.getItem(\"userId\")\r\n          const data = await apiFetch(`${config.API_BASE_URL}/get_user_sessions?user_id=${userId}`);\r\n          setSessions(data);\r\n          \r\n          if (chatID && sessions.some(session => session.session_id === chatID)) {\r\n              //const firstSessionId = data[0].session_id;\r\n              setChatID(chatID);\r\n              \r\n              // Immediately fetch the chat history for the first session\r\n              await fetchChatSession(chatID);\r\n          }\r\n      } catch (error) {\r\n          console.error('Error fetching user sessions:', error);\r\n      }\r\n  };\r\n\r\n  const handleChatIDChange = async (newChatID) => {\r\n      if (newChatID === \"NONE\") {\r\n          await createNewChatSession();\r\n      } else {\r\n          setChatID(newChatID);\r\n          await fetchChatSession(newChatID);\r\n      }\r\n  };\r\n\r\n\r\n\r\n  const createNewChatSession = async () => {\r\n    try {\r\n      const userId = localStorage.getItem(\"userId\")\r\n      const data = await apiFetch(`${config.API_BASE_URL}/create_chat_session`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ user_id: userId }),\r\n      });\r\n  \r\n      const newSession = {\r\n        user_id: userId,\r\n        session_id: data.session_id,\r\n        created_at: new Date().toISOString(),\r\n      };\r\n  \r\n      setSessions((prevSessions) => [...prevSessions, newSession]);\r\n      setChatID(data.session_id); // Update state with new chat session\r\n      setChats((prev) => ({ ...prev, [data.session_id]: [] }));\r\n  \r\n      return data.session_id; // Return new session ID\r\n    } catch (error) {\r\n      console.error('Error creating new chat session:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const fetchChatSession = async (sessionID) => {\r\n      try {\r\n        const userId = localStorage.getItem(\"userId\")\r\n\r\n        if(sessionID === null) return; // null check yoktu ve sorun cikariyordu, ekledim umarim sorun cikarmaz :D\r\n        \r\n          const token = localStorage.getItem('authToken');\r\n          const response = await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=${userId}&session_id=${sessionID}`, {headers: { 'Authorization': `Bearer ${token}` }} );\r\n          const data = await response.json();\r\n          console.log(\"fetchChatSession datası!!!!!: \", data);\r\n          \r\n    // Convert backend conversation to frontend message format\r\n    const formattedMessages = data.map((msg, index) => {\r\n      const messageArray = [\r\n          { \r\n              id: index * 2, \r\n              text: msg.user_query, \r\n              isBot: false \r\n          },\r\n          { \r\n              id: index * 2 + 1, \r\n              text: msg.agent_response, \r\n              isBot: true ,\r\n\r\n              sources: msg.highlighted_pdf,\r\n          }\r\n      ];\r\n\r\n\r\n      return messageArray;\r\n  }).flat();\r\n\r\n          // Update chats state with formatted messages\r\n          setChats(prev => ({ ...prev, [sessionID]: formattedMessages }));\r\n      } catch (error) {\r\n          console.error('Error fetching chat session:', error);\r\n          // Ensure an empty array is set if fetch fails\r\n          setChats(prev => ({ ...prev, [sessionID]: [] }));\r\n      }\r\n  };\r\n\r\n  const renderRightPanel = () => {\r\n    switch (selectedOption) {\r\n      case 0:\r\n        return <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n      case 1:\r\n        return <DocumentManagement />;\r\n      case 2:\r\n        return  <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n      default:\r\n        return  <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n      <div className=\"main-container\">\r\n          <div className=\"left-panel\">\r\n              <SidePanel \r\n                  chatID={chatID} \r\n                  setChatID={handleChatIDChange} \r\n                  sessions={sessions} \r\n                  fetchUserSessions={fetchUserSessions}\r\n\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption} // Pass state setter to SidePanel\r\n\r\n              />\r\n          </div>\r\n          <div className=\"right-panel\">\r\n              {renderRightPanel()} \r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Main;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
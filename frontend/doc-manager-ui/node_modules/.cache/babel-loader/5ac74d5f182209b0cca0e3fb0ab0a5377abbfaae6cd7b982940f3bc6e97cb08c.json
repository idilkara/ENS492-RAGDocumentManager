{"ast":null,"code":"/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","map":{"version":3,"names":["blankLine","content","factorySpace","markdownLineEnding","flow","tokenize","initializeFlow","effects","self","initial","attempt","atBlankEnding","parser","constructs","flowInitial","afterConstruct","code","consume","enter","exit","currentConstruct","undefined"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/Bitirme/bitirme/frontend/doc-manager-ui/node_modules/micromark/lib/initialize/flow.js"],"sourcesContent":["/**\r\n * @import {\r\n *   InitialConstruct,\r\n *   Initializer,\r\n *   State,\r\n *   TokenizeContext\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { blankLine, content } from 'micromark-core-commonmark';\r\nimport { factorySpace } from 'micromark-factory-space';\r\nimport { markdownLineEnding } from 'micromark-util-character';\r\n/** @type {InitialConstruct} */\r\nexport const flow = {\r\n  tokenize: initializeFlow\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Self.\r\n * @type {Initializer}\r\n *   Initializer.\r\n */\r\nfunction initializeFlow(effects) {\r\n  const self = this;\r\n  const initial = effects.attempt(\r\n  // Try to parse a blank line.\r\n  blankLine, atBlankEnding,\r\n  // Try to parse initial flow (essentially, only code).\r\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\r\n  return initial;\r\n\r\n  /** @type {State} */\r\n  function atBlankEnding(code) {\r\n    if (code === null) {\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    effects.enter(\"lineEndingBlank\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEndingBlank\");\r\n    self.currentConstruct = undefined;\r\n    return initial;\r\n  }\r\n\r\n  /** @type {State} */\r\n  function afterConstruct(code) {\r\n    if (code === null) {\r\n      effects.consume(code);\r\n      return;\r\n    }\r\n    effects.enter(\"lineEnding\");\r\n    effects.consume(code);\r\n    effects.exit(\"lineEnding\");\r\n    self.currentConstruct = undefined;\r\n    return initial;\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,SAAS,EAAEC,OAAO,QAAQ,2BAA2B;AAC9D,SAASC,YAAY,QAAQ,yBAAyB;AACtD,SAASC,kBAAkB,QAAQ,0BAA0B;AAC7D;AACA,OAAO,MAAMC,IAAI,GAAG;EAClBC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAcA,CAACC,OAAO,EAAE;EAC/B,MAAMC,IAAI,GAAG,IAAI;EACjB,MAAMC,OAAO,GAAGF,OAAO,CAACG,OAAO;EAC/B;EACAV,SAAS,EAAEW,aAAa;EACxB;EACAJ,OAAO,CAACG,OAAO,CAAC,IAAI,CAACE,MAAM,CAACC,UAAU,CAACC,WAAW,EAAEC,cAAc,EAAEb,YAAY,CAACK,OAAO,EAAEA,OAAO,CAACG,OAAO,CAAC,IAAI,CAACE,MAAM,CAACC,UAAU,CAACT,IAAI,EAAEW,cAAc,EAAER,OAAO,CAACG,OAAO,CAACT,OAAO,EAAEc,cAAc,CAAC,CAAC,EAAE,YAAY,CAAC,CAAC,CAAC;EACjN,OAAON,OAAO;;EAEd;EACA,SAASE,aAAaA,CAACK,IAAI,EAAE;IAC3B,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACAT,OAAO,CAACW,KAAK,CAAC,iBAAiB,CAAC;IAChCX,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrBT,OAAO,CAACY,IAAI,CAAC,iBAAiB,CAAC;IAC/BX,IAAI,CAACY,gBAAgB,GAAGC,SAAS;IACjC,OAAOZ,OAAO;EAChB;;EAEA;EACA,SAASM,cAAcA,CAACC,IAAI,EAAE;IAC5B,IAAIA,IAAI,KAAK,IAAI,EAAE;MACjBT,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;MACrB;IACF;IACAT,OAAO,CAACW,KAAK,CAAC,YAAY,CAAC;IAC3BX,OAAO,CAACU,OAAO,CAACD,IAAI,CAAC;IACrBT,OAAO,CAACY,IAAI,CAAC,YAAY,CAAC;IAC1BX,IAAI,CAACY,gBAAgB,GAAGC,SAAS;IACjC,OAAOZ,OAAO;EAChB;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
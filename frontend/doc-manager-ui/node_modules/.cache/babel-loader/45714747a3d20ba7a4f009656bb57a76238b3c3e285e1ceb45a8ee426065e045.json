{"ast":null,"code":"/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","map":{"version":3,"names":["labelEnd","labelStartImage","name","resolveAll","tokenize","tokenizeLabelStartImage","effects","ok","nok","self","start","code","enter","consume","exit","open","after","parser","constructs"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/Bitirme/bitirme/frontend/doc-manager-ui/node_modules/micromark-core-commonmark/lib/label-start-image.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Construct,\r\n *   State,\r\n *   TokenizeContext,\r\n *   Tokenizer\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { labelEnd } from './label-end.js';\r\n\r\n/** @type {Construct} */\r\nexport const labelStartImage = {\r\n  name: 'labelStartImage',\r\n  resolveAll: labelEnd.resolveAll,\r\n  tokenize: tokenizeLabelStartImage\r\n};\r\n\r\n/**\r\n * @this {TokenizeContext}\r\n *   Context.\r\n * @type {Tokenizer}\r\n */\r\nfunction tokenizeLabelStartImage(effects, ok, nok) {\r\n  const self = this;\r\n  return start;\r\n\r\n  /**\r\n   * Start of label (image) start.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *       ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(\"labelImage\");\r\n    effects.enter(\"labelImageMarker\");\r\n    effects.consume(code);\r\n    effects.exit(\"labelImageMarker\");\r\n    return open;\r\n  }\r\n\r\n  /**\r\n   * After `!`, at `[`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function open(code) {\r\n    if (code === 91) {\r\n      effects.enter(\"labelMarker\");\r\n      effects.consume(code);\r\n      effects.exit(\"labelMarker\");\r\n      effects.exit(\"labelImage\");\r\n      return after;\r\n    }\r\n    return nok(code);\r\n  }\r\n\r\n  /**\r\n   * After `![`.\r\n   *\r\n   * ```markdown\r\n   * > | a ![b] c\r\n   *         ^\r\n   * ```\r\n   *\r\n   * This is needed in because, when GFM footnotes are enabled, images never\r\n   * form when started with a `^`.\r\n   * Instead, links form:\r\n   *\r\n   * ```markdown\r\n   * ![^a](b)\r\n   *\r\n   * ![^a][b]\r\n   *\r\n   * [b]: c\r\n   * ```\r\n   *\r\n   * ```html\r\n   * <p>!<a href=\\\"b\\\">^a</a></p>\r\n   * <p>!<a href=\\\"c\\\">^a</a></p>\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function after(code) {\r\n    // To do: use a new field to do this, this is still needed for\r\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\r\n    // behavior isn’t.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\r\n  }\r\n}"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,QAAQ,QAAQ,gBAAgB;;AAEzC;AACA,OAAO,MAAMC,eAAe,GAAG;EAC7BC,IAAI,EAAE,iBAAiB;EACvBC,UAAU,EAAEH,QAAQ,CAACG,UAAU;EAC/BC,QAAQ,EAAEC;AACZ,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA,SAASA,uBAAuBA,CAACC,OAAO,EAAEC,EAAE,EAAEC,GAAG,EAAE;EACjD,MAAMC,IAAI,GAAG,IAAI;EACjB,OAAOC,KAAK;;EAEZ;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,KAAKA,CAACC,IAAI,EAAE;IACnBL,OAAO,CAACM,KAAK,CAAC,YAAY,CAAC;IAC3BN,OAAO,CAACM,KAAK,CAAC,kBAAkB,CAAC;IACjCN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;IACrBL,OAAO,CAACQ,IAAI,CAAC,kBAAkB,CAAC;IAChC,OAAOC,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASA,IAAIA,CAACJ,IAAI,EAAE;IAClB,IAAIA,IAAI,KAAK,EAAE,EAAE;MACfL,OAAO,CAACM,KAAK,CAAC,aAAa,CAAC;MAC5BN,OAAO,CAACO,OAAO,CAACF,IAAI,CAAC;MACrBL,OAAO,CAACQ,IAAI,CAAC,aAAa,CAAC;MAC3BR,OAAO,CAACQ,IAAI,CAAC,YAAY,CAAC;MAC1B,OAAOE,KAAK;IACd;IACA,OAAOR,GAAG,CAACG,IAAI,CAAC;EAClB;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASK,KAAKA,CAACL,IAAI,EAAE;IACnB;IACA;IACA;IACA;IACA;IACA,OAAOA,IAAI,KAAK,EAAE,IAAI,wBAAwB,IAAIF,IAAI,CAACQ,MAAM,CAACC,UAAU,GAAGV,GAAG,CAACG,IAAI,CAAC,GAAGJ,EAAE,CAACI,IAAI,CAAC;EACjG;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
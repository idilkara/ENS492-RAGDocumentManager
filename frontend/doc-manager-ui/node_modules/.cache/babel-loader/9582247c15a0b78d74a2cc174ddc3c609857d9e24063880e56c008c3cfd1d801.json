{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Main.css';\nimport SidePanel from './sidepanel'; // Import the SidePanel component\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [chatID, setChatID] = useState(null);\n  const [setSessions] = useState([]);\n  const [chats, setChats] = useState({});\n  useEffect(() => {\n    // Fetch user sessions when the component mounts\n    fetchUserSessions();\n  }, []);\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/get_user_sessions?user_id=1');\n      const data = await response.json();\n      setSessions(data);\n      if (data.length > 0) {\n        const firstSessionId = data[0].session_id;\n        setChatID(firstSessionId);\n\n        // Immediately fetch the chat history for the first session\n        await fetchChatSession(firstSessionId);\n      }\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n    }\n  };\n  const handleChatIDChange = async newChatID => {\n    if (newChatID === \"NONE\") {\n      await createNewChatSession();\n    } else {\n      setChatID(newChatID);\n      await fetchChatSession(newChatID);\n    }\n  };\n  const createNewChatSession = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/create_chat_session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: '1'\n        })\n      });\n      const data = await response.json();\n\n      // Update sessions list\n      const newSession = {\n        user_id: '1',\n        session_id: data.session_id,\n        created_at: new Date().toISOString()\n      };\n      setSessions([...sessions, newSession]);\n\n      // Set the new chat ID and initialize its chat history\n      setChatID(data.session_id);\n      setChats(prev => ({\n        ...prev,\n        [data.session_id]: []\n      }));\n    } catch (error) {\n      console.error('Error creating new chat session:', error);\n    }\n  };\n  const fetchChatSession = async sessionID => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get_chat_session?user_id=1&session_id=${sessionID}`);\n      const data = await response.json();\n\n      // Convert backend conversation to frontend message format\n      const formattedMessages = data.map((msg, index) => [{\n        id: index * 2,\n        text: msg.user_query,\n        isBot: false\n      }, {\n        id: index * 2 + 1,\n        text: msg.agent_response,\n        isBot: true\n      }]).flat();\n\n      // Update chats state with formatted messages\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: formattedMessages\n      }));\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n      // Ensure an empty array is set if fetch fails\n      setChats(prev => ({\n        ...prev,\n        [sessionID]: []\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: /*#__PURE__*/_jsxDEV(SidePanel, {\n        chatID: chatID,\n        setChatID: handleChatIDChange,\n        sessions: sessions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: /*#__PURE__*/_jsxDEV(ChatbotUI, {\n        chatID: chatID,\n        chats: chats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 15\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 7\n  }, this);\n};\n_s(Main, \"z3Qr9mZcW590sMCv5w6njgZn9HE=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","SidePanel","ChatbotUI","jsxDEV","_jsxDEV","Main","_s","chatID","setChatID","setSessions","chats","setChats","fetchUserSessions","response","fetch","data","json","length","firstSessionId","session_id","fetchChatSession","error","console","handleChatIDChange","newChatID","createNewChatSession","method","headers","body","JSON","stringify","user_id","newSession","created_at","Date","toISOString","sessions","prev","sessionID","formattedMessages","map","msg","index","id","text","user_query","isBot","agent_response","flat","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Main.css';\r\nimport SidePanel from './sidepanel'; // Import the SidePanel component\r\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\r\n\r\nconst Main = () => {\r\n  const [chatID, setChatID] = useState(null);\r\n  const [setSessions] = useState([]);\r\n  const [chats, setChats] = useState({});\r\n\r\n  useEffect(() => {\r\n      // Fetch user sessions when the component mounts\r\n      fetchUserSessions();\r\n  }, []);\r\n\r\n  const fetchUserSessions = async () => {\r\n      try {\r\n          const response = await fetch('http://127.0.0.1:5000/get_user_sessions?user_id=1');\r\n          const data = await response.json();\r\n          setSessions(data);\r\n          \r\n          if (data.length > 0) {\r\n              const firstSessionId = data[0].session_id;\r\n              setChatID(firstSessionId);\r\n              \r\n              // Immediately fetch the chat history for the first session\r\n              await fetchChatSession(firstSessionId);\r\n          }\r\n      } catch (error) {\r\n          console.error('Error fetching user sessions:', error);\r\n      }\r\n  };\r\n\r\n  const handleChatIDChange = async (newChatID) => {\r\n      if (newChatID === \"NONE\") {\r\n          await createNewChatSession();\r\n      } else {\r\n          setChatID(newChatID);\r\n          await fetchChatSession(newChatID);\r\n      }\r\n  };\r\n\r\n  const createNewChatSession = async () => {\r\n      try {\r\n          const response = await fetch('http://127.0.0.1:5000/create_chat_session', {\r\n              method: 'POST',\r\n              headers: {\r\n                  'Content-Type': 'application/json',\r\n              },\r\n              body: JSON.stringify({ user_id: '1' }),\r\n          });\r\n          const data = await response.json();\r\n          \r\n          // Update sessions list\r\n          const newSession = { \r\n              user_id: '1', \r\n              session_id: data.session_id, \r\n              created_at: new Date().toISOString() \r\n          };\r\n          setSessions([...sessions, newSession]);\r\n          \r\n          // Set the new chat ID and initialize its chat history\r\n          setChatID(data.session_id);\r\n          setChats(prev => ({ ...prev, [data.session_id]: [] }));\r\n      } catch (error) {\r\n          console.error('Error creating new chat session:', error);\r\n      }\r\n  };\r\n\r\n  const fetchChatSession = async (sessionID) => {\r\n      try {\r\n          const response = await fetch(`http://127.0.0.1:5000/get_chat_session?user_id=1&session_id=${sessionID}`);\r\n          const data = await response.json();\r\n          \r\n          // Convert backend conversation to frontend message format\r\n          const formattedMessages = data.map((msg, index) => [\r\n              { \r\n                  id: index * 2, \r\n                  text: msg.user_query, \r\n                  isBot: false \r\n              },\r\n              { \r\n                  id: index * 2 + 1, \r\n                  text: msg.agent_response, \r\n                  isBot: true \r\n              }\r\n          ]).flat();\r\n\r\n          // Update chats state with formatted messages\r\n          setChats(prev => ({ ...prev, [sessionID]: formattedMessages }));\r\n      } catch (error) {\r\n          console.error('Error fetching chat session:', error);\r\n          // Ensure an empty array is set if fetch fails\r\n          setChats(prev => ({ ...prev, [sessionID]: [] }));\r\n      }\r\n  };\r\n\r\n  return (\r\n      <div className=\"main-container\">\r\n          <div className=\"left-panel\">\r\n              <SidePanel \r\n                  chatID={chatID} \r\n                  setChatID={handleChatIDChange} \r\n                  sessions={sessions} \r\n              />\r\n          </div>\r\n          <div className=\"right-panel\">\r\n              <ChatbotUI chatID={chatID} chats={chats} />\r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
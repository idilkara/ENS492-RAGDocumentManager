{"ast":null,"code":"/**\r\n * @import {\r\n *   Effects,\r\n *   State,\r\n *   TokenizeContext,\r\n *   TokenType\r\n * } from 'micromark-util-types'\r\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\r\n * Parse labels.\r\n *\r\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once weâ€™ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesnâ€™t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","map":{"version":3,"names":["markdownLineEnding","markdownSpace","factoryLabel","effects","ok","nok","type","markerType","stringType","self","size","seen","start","code","enter","consume","exit","atBreak","parser","constructs","contentType","labelInside","labelEscape"],"sources":["C:/Users/LENOVO/OneDrive/MasaÃ¼stÃ¼/Bitirme/bitirme/frontend/doc-manager-ui/node_modules/micromark-factory-label/index.js"],"sourcesContent":["/**\r\n * @import {\r\n *   Effects,\r\n *   State,\r\n *   TokenizeContext,\r\n *   TokenType\r\n * } from 'micromark-util-types'\r\n */\r\n\r\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\r\n/**\r\n * Parse labels.\r\n *\r\n * > ðŸ‘‰ **Note**: labels in markdown are capped at 999 characters in the string.\r\n *\r\n * ###### Examples\r\n *\r\n * ```markdown\r\n * [a]\r\n * [a\r\n * b]\r\n * [a\\]b]\r\n * ```\r\n *\r\n * @this {TokenizeContext}\r\n *   Tokenize context.\r\n * @param {Effects} effects\r\n *   Context.\r\n * @param {State} ok\r\n *   State switched to when successful.\r\n * @param {State} nok\r\n *   State switched to when unsuccessful.\r\n * @param {TokenType} type\r\n *   Type of the whole label (`[a]`).\r\n * @param {TokenType} markerType\r\n *   Type for the markers (`[` and `]`).\r\n * @param {TokenType} stringType\r\n *   Type for the identifier (`a`).\r\n * @returns {State}\r\n *   Start state.\r\n */\r\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\r\n  const self = this;\r\n  let size = 0;\r\n  /** @type {boolean} */\r\n  let seen;\r\n  return start;\r\n\r\n  /**\r\n   * Start of label.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *     ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function start(code) {\r\n    effects.enter(type);\r\n    effects.enter(markerType);\r\n    effects.consume(code);\r\n    effects.exit(markerType);\r\n    effects.enter(stringType);\r\n    return atBreak;\r\n  }\r\n\r\n  /**\r\n   * In label, at something, before something else.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function atBreak(code) {\r\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\r\n    // To do: remove in the future once weâ€™ve switched from\r\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\r\n    // which doesnâ€™t need this.\r\n    // Hidden footnotes hook.\r\n    /* c8 ignore next 3 */\r\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\r\n      return nok(code);\r\n    }\r\n    if (code === 93) {\r\n      effects.exit(stringType);\r\n      effects.enter(markerType);\r\n      effects.consume(code);\r\n      effects.exit(markerType);\r\n      effects.exit(type);\r\n      return ok;\r\n    }\r\n\r\n    // To do: indent? Link chunks and EOLs together?\r\n    if (markdownLineEnding(code)) {\r\n      effects.enter(\"lineEnding\");\r\n      effects.consume(code);\r\n      effects.exit(\"lineEnding\");\r\n      return atBreak;\r\n    }\r\n    effects.enter(\"chunkString\", {\r\n      contentType: \"string\"\r\n    });\r\n    return labelInside(code);\r\n  }\r\n\r\n  /**\r\n   * In label, in text.\r\n   *\r\n   * ```markdown\r\n   * > | [a]\r\n   *      ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelInside(code) {\r\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\r\n      effects.exit(\"chunkString\");\r\n      return atBreak(code);\r\n    }\r\n    effects.consume(code);\r\n    if (!seen) seen = !markdownSpace(code);\r\n    return code === 92 ? labelEscape : labelInside;\r\n  }\r\n\r\n  /**\r\n   * After `\\`, at a special character.\r\n   *\r\n   * ```markdown\r\n   * > | [a\\*a]\r\n   *        ^\r\n   * ```\r\n   *\r\n   * @type {State}\r\n   */\r\n  function labelEscape(code) {\r\n    if (code === 91 || code === 92 || code === 93) {\r\n      effects.consume(code);\r\n      size++;\r\n      return labelInside;\r\n    }\r\n    return labelInside(code);\r\n  }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './chatbot.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: 'Hello! How can I assist you today?',\n    isBot: true\n  }]);\n  const [input, setInput] = useState('');\n  const [isDimVisible, setIsDimVisible] = useState(false); // State for dim overlay visibility\n  const [isPdfVisible, setIsPdfVisible] = useState(false); // State for PDF visibility\n\n  const handleSendMessage = () => {\n    if (input.trim() === '') return;\n    const newMessage = {\n      id: Date.now(),\n      text: input,\n      isBot: false\n    };\n    setMessages([...messages, newMessage]);\n\n    // // Simulate bot response\n    // setTimeout(() => {\n    //   setMessages((prev) => [\n    //     ...prev,\n    //     { id: Date.now() + 1, text: 'I’m here to help you manage documents.', isBot: true },\n    //   ]);\n    // }, 1000);\n    try {\n      var _response$data$result;\n      // Send user message to backend /query endpoint\n      const response = axios.post('http://127.0.0.1:5000/user_query', {\n        query: input\n      });\n\n      // Add bot's response to messages\n      const botMessage = {\n        id: Date.now() + 1,\n        text: ((_response$data$result = response.data.results[0]) === null || _response$data$result === void 0 ? void 0 : _response$data$result.content) || 'No results found.',\n        isBot: true\n      };\n      setMessages(prev => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error communicating with backend:', error);\n      const errorMessage = {\n        id: Date.now() + 2,\n        text: 'Error connecting to the server.',\n        isBot: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n    }\n    setInput('');\n  };\n  const handleViewPDFClick = () => {\n    setIsDimVisible(true); // Show dim overlay when the button is clicked\n    setIsPdfVisible(true); // Show PDF viewer\n  };\n  const handleBackArrowClick = () => {\n    setIsDimVisible(false); // Hide dim overlay when back arrow is clicked\n    setIsPdfVisible(false); // Hide PDF viewer\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [isDimVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dim\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-arrow-button\",\n        onClick: handleBackArrowClick,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this), isPdfVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-container\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: \"/pdfs/aaa.pdf\" // Assuming the PDF is in the public folder\n        ,\n\n        title: \"PDF Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"Document Management Chatbot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: [msg.text, msg.isBot && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"display-button\",\n            onClick: handleViewPDFClick,\n            children: \"View PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 17\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"text-input\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotUI, \"OeD8qMgwnK+YletH9uADMAo3UOE=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","axios","jsxDEV","_jsxDEV","ChatbotUI","_s","messages","setMessages","id","text","isBot","input","setInput","isDimVisible","setIsDimVisible","isPdfVisible","setIsPdfVisible","handleSendMessage","trim","newMessage","Date","now","_response$data$result","response","post","query","botMessage","data","results","content","prev","error","console","errorMessage","handleViewPDFClick","handleBackArrowClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","title","map","msg","type","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './chatbot.css';\nimport axios from 'axios';\n\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([\n    { id: 1, text: 'Hello! How can I assist you today?', isBot: true },\n  ]);\n  const [input, setInput] = useState('');\n  const [isDimVisible, setIsDimVisible] = useState(false);  // State for dim overlay visibility\n  const [isPdfVisible, setIsPdfVisible] = useState(false);  // State for PDF visibility\n\n  const handleSendMessage = () => {\n    if (input.trim() === '') return;\n\n    const newMessage = { id: Date.now(), text: input, isBot: false };\n    setMessages([...messages, newMessage]);\n\n    // // Simulate bot response\n    // setTimeout(() => {\n    //   setMessages((prev) => [\n    //     ...prev,\n    //     { id: Date.now() + 1, text: 'I’m here to help you manage documents.', isBot: true },\n    //   ]);\n    // }, 1000);\n    try {\n      // Send user message to backend /query endpoint\n      const response = axios.post('http://127.0.0.1:5000/user_query', {\n        query: input,\n      });\n\n      // Add bot's response to messages\n      const botMessage = {\n        id: Date.now() + 1,\n        text: response.data.results[0]?.content || 'No results found.',\n        isBot: true,\n      };\n      setMessages((prev) => [...prev, botMessage]);\n    } catch (error) {\n      console.error('Error communicating with backend:', error);\n      const errorMessage = { id: Date.now() + 2, text: 'Error connecting to the server.', isBot: true };\n      setMessages((prev) => [...prev, errorMessage]);\n    }\n\n    setInput('');\n  };\n\n  const handleViewPDFClick = () => {\n    setIsDimVisible(true);  // Show dim overlay when the button is clicked\n    setIsPdfVisible(true);  // Show PDF viewer\n  };\n\n  const handleBackArrowClick = () => {\n    setIsDimVisible(false);  // Hide dim overlay when back arrow is clicked\n    setIsPdfVisible(false);  // Hide PDF viewer\n  };\n\n  return (\n    <div className=\"app-container\">\n      {isDimVisible && (\n        <div className=\"dim\">\n          {/* Back arrow button to restore lights */}\n          <button className=\"back-arrow-button\" onClick={handleBackArrowClick}>\n            ←\n          </button>\n        </div>\n      )}\n\n      {/* PDF Viewer */}\n      {isPdfVisible && (\n        <div className=\"pdf-container\">\n          {/* Using iframe to display the PDF */}\n          <iframe\n            src=\"/pdfs/aaa.pdf\"  // Assuming the PDF is in the public folder\n\n            title=\"PDF Viewer\"\n          ></iframe>\n        </div>\n      )}\n\n      <div className=\"chat-container\">\n        <div className=\"chat-header\">Document Management Chatbot</div>\n\n        <div className=\"chat-history\">\n          {messages.map((msg) => (\n            <div key={msg.id} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n              {msg.text}\n\n              {/* Show the button below the chatbot message only */}\n              {msg.isBot && (\n                <button className=\"display-button\" onClick={handleViewPDFClick}>\n                  View PDF\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            className=\"text-input\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button className=\"send-button\" onClick={handleSendMessage}>\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotUI;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,eAAe;AACtB,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,CACvC;IAAEQ,EAAE,EAAE,CAAC;IAAEC,IAAI,EAAE,oCAAoC;IAAEC,KAAK,EAAE;EAAK,CAAC,CACnE,CAAC;EACF,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAM,CAACa,YAAY,EAAEC,eAAe,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;EAC1D,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAE;;EAE1D,MAAMiB,iBAAiB,GAAGA,CAAA,KAAM;IAC9B,IAAIN,KAAK,CAACO,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;IAEzB,MAAMC,UAAU,GAAG;MAAEX,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC;MAAEZ,IAAI,EAAEE,KAAK;MAAED,KAAK,EAAE;IAAM,CAAC;IAChEH,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEa,UAAU,CAAC,CAAC;;IAEtC;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;MAAA,IAAAG,qBAAA;MACF;MACA,MAAMC,QAAQ,GAAGtB,KAAK,CAACuB,IAAI,CAAC,kCAAkC,EAAE;QAC9DC,KAAK,EAAEd;MACT,CAAC,CAAC;;MAEF;MACA,MAAMe,UAAU,GAAG;QACjBlB,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC;QAClBZ,IAAI,EAAE,EAAAa,qBAAA,GAAAC,QAAQ,CAACI,IAAI,CAACC,OAAO,CAAC,CAAC,CAAC,cAAAN,qBAAA,uBAAxBA,qBAAA,CAA0BO,OAAO,KAAI,mBAAmB;QAC9DnB,KAAK,EAAE;MACT,CAAC;MACDH,WAAW,CAAEuB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEJ,UAAU,CAAC,CAAC;IAC9C,CAAC,CAAC,OAAOK,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;MACzD,MAAME,YAAY,GAAG;QAAEzB,EAAE,EAAEY,IAAI,CAACC,GAAG,CAAC,CAAC,GAAG,CAAC;QAAEZ,IAAI,EAAE,iCAAiC;QAAEC,KAAK,EAAE;MAAK,CAAC;MACjGH,WAAW,CAAEuB,IAAI,IAAK,CAAC,GAAGA,IAAI,EAAEG,YAAY,CAAC,CAAC;IAChD;IAEArB,QAAQ,CAAC,EAAE,CAAC;EACd,CAAC;EAED,MAAMsB,kBAAkB,GAAGA,CAAA,KAAM;IAC/BpB,eAAe,CAAC,IAAI,CAAC,CAAC,CAAE;IACxBE,eAAe,CAAC,IAAI,CAAC,CAAC,CAAE;EAC1B,CAAC;EAED,MAAMmB,oBAAoB,GAAGA,CAAA,KAAM;IACjCrB,eAAe,CAAC,KAAK,CAAC,CAAC,CAAE;IACzBE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAE;EAC3B,CAAC;EAED,oBACEb,OAAA;IAAKiC,SAAS,EAAC,eAAe;IAAAC,QAAA,GAC3BxB,YAAY,iBACXV,OAAA;MAAKiC,SAAS,EAAC,KAAK;MAAAC,QAAA,eAElBlC,OAAA;QAAQiC,SAAS,EAAC,mBAAmB;QAACE,OAAO,EAAEH,oBAAqB;QAAAE,QAAA,EAAC;MAErE;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CACN,EAGA3B,YAAY,iBACXZ,OAAA;MAAKiC,SAAS,EAAC,eAAe;MAAAC,QAAA,eAE5BlC,OAAA;QACEwC,GAAG,EAAC,eAAe,CAAE;QAAA;;QAErBC,KAAK,EAAC;MAAY;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACP,CACN,eAEDvC,OAAA;MAAKiC,SAAS,EAAC,gBAAgB;MAAAC,QAAA,gBAC7BlC,OAAA;QAAKiC,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAA2B;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAE9DvC,OAAA;QAAKiC,SAAS,EAAC,cAAc;QAAAC,QAAA,EAC1B/B,QAAQ,CAACuC,GAAG,CAAEC,GAAG,iBAChB3C,OAAA;UAAkBiC,SAAS,EAAE,WAAWU,GAAG,CAACpC,KAAK,GAAG,KAAK,GAAG,MAAM,EAAG;UAAA2B,QAAA,GAClES,GAAG,CAACrC,IAAI,EAGRqC,GAAG,CAACpC,KAAK,iBACRP,OAAA;YAAQiC,SAAS,EAAC,gBAAgB;YAACE,OAAO,EAAEJ,kBAAmB;YAAAG,QAAA,EAAC;UAEhE;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CACT;QAAA,GAROI,GAAG,CAACtC,EAAE;UAAA+B,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OASX,CACN;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC,CAAC,eAENvC,OAAA;QAAKiC,SAAS,EAAC,iBAAiB;QAAAC,QAAA,gBAC9BlC,OAAA;UACE4C,IAAI,EAAC,MAAM;UACXX,SAAS,EAAC,YAAY;UACtBY,KAAK,EAAErC,KAAM;UACbsC,QAAQ,EAAGC,CAAC,IAAKtC,QAAQ,CAACsC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAE;UAC1CI,WAAW,EAAC;QAAsB;UAAAb,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACnC,CAAC,eACFvC,OAAA;UAAQiC,SAAS,EAAC,aAAa;UAACE,OAAO,EAAErB,iBAAkB;UAAAoB,QAAA,EAAC;QAE5D;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACN,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACrC,EAAA,CA7GID,SAAS;AAAAiD,EAAA,GAATjD,SAAS;AA+Gf,eAAeA,SAAS;AAAC,IAAAiD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
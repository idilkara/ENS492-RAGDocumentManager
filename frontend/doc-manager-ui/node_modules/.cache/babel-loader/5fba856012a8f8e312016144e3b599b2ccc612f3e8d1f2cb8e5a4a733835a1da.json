{"ast":null,"code":"import React,{useState,useEffect}from'react';import'./Main.css';import SidePanel from'./sidepanel';// Import the SidePanel component\nimport ChatbotUI from'./chatbot';// Import the ChatbotUI component\nimport config from\"../config\";import apiFetch from'../api';import DocumentManagement from'./documentManagement.js';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Main=()=>{const[chatID,setChatID]=useState(null);const[sessions,setSessions]=useState([]);const[chats,setChats]=useState({});const[selectedOption,setSelectedOption]=useState(0);useEffect(()=>{// Fetch user sessions when the component mounts\nfetchUserSessions();},[]);/*useEffect(() => {\r\n        fetchUserSessions();\r\n    }, [chatID, chats]);\r\n  */const fetchUserSessions=async()=>{try{const userId=localStorage.getItem(\"userId\");const data=await apiFetch(`${config.API_BASE_URL}/get_user_sessions?user_id=${userId}`);setSessions(data);if(chatID&&sessions.some(session=>session.session_id===chatID)){//const firstSessionId = data[0].session_id;\nsetChatID(chatID);// Immediately fetch the chat history for the first session\nawait fetchChatSession(chatID);}}catch(error){console.error('Error fetching user sessions:',error);}};const handleChatIDChange=async newChatID=>{if(newChatID===\"NONE\"){await createNewChatSession();}else{setChatID(newChatID);await fetchChatSession(newChatID);}};const createNewChatSession=async()=>{try{const userId=localStorage.getItem(\"userId\");const data=await apiFetch(`${config.API_BASE_URL}/create_chat_session`,{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({user_id:userId})});const newSession={user_id:userId,session_id:data.session_id,created_at:new Date().toISOString()};setSessions(prevSessions=>[...prevSessions,newSession]);setChatID(data.session_id);// Update state with new chat session\nsetChats(prev=>({...prev,[data.session_id]:[]}));return data.session_id;// Return new session ID\n}catch(error){console.error('Error creating new chat session:',error);return null;}};const fetchChatSession=async sessionID=>{try{const userId=localStorage.getItem(\"userId\");if(sessionID===null)return;// null check yoktu ve sorun cikariyordu, ekledim umarim sorun cikarmaz :D\nconst token=localStorage.getItem('authToken');const response=await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=${userId}&session_id=${sessionID}`,{headers:{'Authorization':`Bearer ${token}`}});const data=await response.json();console.log(\"fetchChatSession datası!!!!!: \",data);// Convert backend conversation to frontend message format\nconst formattedMessages=data.map((msg,index)=>{const messageArray=[{id:index*2,text:msg.user_query,isBot:false},{id:index*2+1,text:msg.agent_response,isBot:true,sources:msg.highlighted_pdf}];return messageArray;}).flat();// Update chats state with formatted messages\nsetChats(prev=>({...prev,[sessionID]:formattedMessages}));}catch(error){console.error('Error fetching chat session:',error);// Ensure an empty array is set if fetch fails\nsetChats(prev=>({...prev,[sessionID]:[]}));}};const renderRightPanel=()=>{switch(selectedOption){case 0:return/*#__PURE__*/_jsx(ChatbotUI,{chatID:chatID,chats:chats,setChats:setChats,setChatID:setChatID,createNewChatSession:createNewChatSession});case 1:return/*#__PURE__*/_jsx(DocumentManagement,{});case 2:return/*#__PURE__*/_jsx(ChatbotUI,{chatID:chatID,chats:chats,setChats:setChats,setChatID:setChatID,createNewChatSession:createNewChatSession});default:return/*#__PURE__*/_jsx(ChatbotUI,{chatID:chatID,chats:chats,setChats:setChats,setChatID:setChatID,createNewChatSession:createNewChatSession});}};return/*#__PURE__*/_jsxs(\"div\",{className:\"main-container\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"left-panel\",children:/*#__PURE__*/_jsx(SidePanel,{chatID:chatID,setChatID:handleChatIDChange,sessions:sessions,fetchUserSessions:fetchUserSessions,selectedOption:selectedOption,setSelectedOption:setSelectedOption// Pass state setter to SidePanel\n})}),/*#__PURE__*/_jsx(\"div\",{className:\"right-panel\",children:renderRightPanel()})]});};export default Main;","map":{"version":3,"names":["React","useState","useEffect","SidePanel","ChatbotUI","config","apiFetch","DocumentManagement","jsx","_jsx","jsxs","_jsxs","Main","chatID","setChatID","sessions","setSessions","chats","setChats","selectedOption","setSelectedOption","fetchUserSessions","userId","localStorage","getItem","data","API_BASE_URL","some","session","session_id","fetchChatSession","error","console","handleChatIDChange","newChatID","createNewChatSession","method","headers","body","JSON","stringify","user_id","newSession","created_at","Date","toISOString","prevSessions","prev","sessionID","token","response","fetch","json","log","formattedMessages","map","msg","index","messageArray","id","text","user_query","isBot","agent_response","sources","highlighted_pdf","flat","renderRightPanel","className","children"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/Bitirme/bitirme/frontend/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Main.css';\r\nimport SidePanel from './sidepanel'; // Import the SidePanel component\r\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\r\nimport config from \"../config\";\r\nimport apiFetch from '../api';  \r\n\r\n\r\nimport DocumentManagement from './documentManagement.js'\r\n\r\n\r\nconst Main = () => {\r\n  const [chatID, setChatID] = useState(null);\r\n  const [sessions, setSessions] = useState([]);\r\n  const [chats, setChats] = useState({});\r\n  const [selectedOption, setSelectedOption] = useState(0);\r\n\r\n\r\n  useEffect(() => {\r\n      // Fetch user sessions when the component mounts\r\n      fetchUserSessions();\r\n  }, []);\r\n\r\n    /*useEffect(() => {\r\n        fetchUserSessions();\r\n    }, [chatID, chats]);\r\n  */\r\n\r\n  const fetchUserSessions = async () => {\r\n      try {\r\n          const userId = localStorage.getItem(\"userId\")\r\n          const data = await apiFetch(`${config.API_BASE_URL}/get_user_sessions?user_id=${userId}`);\r\n          setSessions(data);\r\n          \r\n          if (chatID && sessions.some(session => session.session_id === chatID)) {\r\n              //const firstSessionId = data[0].session_id;\r\n              setChatID(chatID);\r\n              \r\n              // Immediately fetch the chat history for the first session\r\n              await fetchChatSession(chatID);\r\n          }\r\n      } catch (error) {\r\n          console.error('Error fetching user sessions:', error);\r\n      }\r\n  };\r\n\r\n  const handleChatIDChange = async (newChatID) => {\r\n      if (newChatID === \"NONE\") {\r\n          await createNewChatSession();\r\n      } else {\r\n          setChatID(newChatID);\r\n          await fetchChatSession(newChatID);\r\n      }\r\n  };\r\n\r\n\r\n\r\n  const createNewChatSession = async () => {\r\n    try {\r\n      const userId = localStorage.getItem(\"userId\")\r\n      const data = await apiFetch(`${config.API_BASE_URL}/create_chat_session`, {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ user_id: userId }),\r\n      });\r\n  \r\n      const newSession = {\r\n        user_id: userId,\r\n        session_id: data.session_id,\r\n        created_at: new Date().toISOString(),\r\n      };\r\n  \r\n      setSessions((prevSessions) => [...prevSessions, newSession]);\r\n      setChatID(data.session_id); // Update state with new chat session\r\n      setChats((prev) => ({ ...prev, [data.session_id]: [] }));\r\n  \r\n      return data.session_id; // Return new session ID\r\n    } catch (error) {\r\n      console.error('Error creating new chat session:', error);\r\n      return null;\r\n    }\r\n  };\r\n  \r\n  const fetchChatSession = async (sessionID) => {\r\n      try {\r\n        const userId = localStorage.getItem(\"userId\")\r\n\r\n        if(sessionID === null) return; // null check yoktu ve sorun cikariyordu, ekledim umarim sorun cikarmaz :D\r\n        \r\n          const token = localStorage.getItem('authToken');\r\n          const response = await fetch(`${config.API_BASE_URL}/get_chat_session?user_id=${userId}&session_id=${sessionID}`, {headers: { 'Authorization': `Bearer ${token}` }} );\r\n          const data = await response.json();\r\n          console.log(\"fetchChatSession datası!!!!!: \", data);\r\n    // Convert backend conversation to frontend message format\r\n    const formattedMessages = data.map((msg, index) => {\r\n      const messageArray = [\r\n          { \r\n              id: index * 2, \r\n              text: msg.user_query, \r\n              isBot: false \r\n          },\r\n          { \r\n              id: index * 2 + 1, \r\n              text: msg.agent_response, \r\n              isBot: true ,\r\n\r\n              sources: msg.highlighted_pdf,\r\n          }\r\n      ];\r\n\r\n\r\n      return messageArray;\r\n  }).flat();\r\n\r\n          // Update chats state with formatted messages\r\n          setChats(prev => ({ ...prev, [sessionID]: formattedMessages }));\r\n      } catch (error) {\r\n          console.error('Error fetching chat session:', error);\r\n          // Ensure an empty array is set if fetch fails\r\n          setChats(prev => ({ ...prev, [sessionID]: [] }));\r\n      }\r\n  };\r\n\r\n  const renderRightPanel = () => {\r\n    switch (selectedOption) {\r\n      case 0:\r\n        return <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n      case 1:\r\n        return <DocumentManagement />;\r\n      case 2:\r\n        return  <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n      default:\r\n        return  <ChatbotUI chatID={chatID} chats={chats} setChats={setChats} setChatID={setChatID} createNewChatSession={createNewChatSession} />;\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n      <div className=\"main-container\">\r\n          <div className=\"left-panel\">\r\n              <SidePanel \r\n                  chatID={chatID} \r\n                  setChatID={handleChatIDChange} \r\n                  sessions={sessions} \r\n                  fetchUserSessions={fetchUserSessions}\r\n\r\n                  selectedOption={selectedOption}\r\n                  setSelectedOption={setSelectedOption} // Pass state setter to SidePanel\r\n\r\n              />\r\n          </div>\r\n          <div className=\"right-panel\">\r\n              {renderRightPanel()} \r\n          </div>\r\n      </div>\r\n  );\r\n};\r\n\r\nexport default Main;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
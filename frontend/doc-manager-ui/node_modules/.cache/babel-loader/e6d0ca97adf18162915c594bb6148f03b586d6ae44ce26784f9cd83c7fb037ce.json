{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport './chatbot.css';\nimport axios from 'axios';\nimport config from \"../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = ({\n  chatID,\n  chats\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState(chats[chatID] || []);\n  const chatHistoryRef = useRef(null);\n  const [isSending, setIsSending] = useState(false);\n  const [isBotResponseComplete, setIsBotResponseComplete] = useState(false);\n\n  // // Effect to set initial messages\n  // useEffect(() => {\n  //   if (chatID === null || chatID === \"NONE\") {\n  //     setMessages([{ id: Date.now(), text: \"Hello, how can I help you?\", isBot: true }]);\n  //   } else {\n  //     setMessages(chats[chatID] || []);\n  //   }\n  // }, [chatID, chats]);\n\n  const fetchMessages = async () => {\n    try {\n      const response = await axios.get(`${config.API_BASE_URL}/get_chat_session?user_id=1&session_id=${chatID}`);\n      const data = response.data;\n\n      // Convert backend conversation to frontend message format\n      const formattedMessages = data.map((msg, index) => [{\n        id: index * 2,\n        text: msg.user_query,\n        isBot: false\n      }, {\n        id: index * 2 + 1,\n        text: msg.agent_response,\n        isBot: true\n      }]).flat();\n      setMessages(formattedMessages);\n\n      // If no bot response is present, set flag as complete\n      const lastMessage = data[data.length - 1];\n      if (lastMessage && lastMessage.agent_response) {\n        setIsBotResponseComplete(true);\n      }\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n    }\n  };\n  useEffect(() => {\n    if (chatID) {\n      // Initial fetch for messages when the chatID changes\n      fetchMessages();\n    }\n  }, [chatID]);\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\" || isSending) return;\n    setIsSending(true);\n    setIsBotResponseComplete(false); // Reset the response completion status\n\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    try {\n      await axios.post(`${config.API_BASE_URL}/user_query`, {\n        query: input,\n        user_id: '1',\n        session_id: chatID\n      });\n\n      // Start polling for bot's response\n      const interval = setInterval(async () => {\n        if (isBotResponseComplete) {\n          clearInterval(interval); // Stop polling when the bot response is complete\n        } else {\n          fetchMessages(); // Fetch updated chat history\n        }\n      }, 2000); // Check every 2 seconds (adjust interval as necessary)\n    } catch (error) {\n      console.error(\"Error sending request:\", error);\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        text: \"Sorry, there was an issue processing your request.\",\n        isBot: true\n      }]);\n      setIsSending(false); // Stop sending state if error occurs\n    }\n  };\n  const handleViewPDFClick = async pdfPath => {\n    if (!pdfPath) return;\n    try {\n      const response = await axios.get(`${config.API_BASE_URL}/get_highlighted_pdf?file_path=${encodeURIComponent(pdfPath)}`, {\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n\n      // Open the PDF in a new tab\n      window.open(url, \"_blank\");\n\n      // Clean up the URL object after opening\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n      }, 100);\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        alert(\"The highlighted PDF has expired. Please make the query again to generate a new highlight.\");\n      } else {\n        console.error(\"Error fetching PDF:\", error);\n        alert(\"Error loading the PDF. Please try again.\");\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Scroll to the most recent message\n  useEffect(() => {\n    if (chatHistoryRef.current) {\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\n    }\n  }, [messages]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interaction-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        ref: chatHistoryRef,\n        children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"no-messages\",\n          children: \"HOW CAN I HELP YOU\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 17\n          }, this), msg.isBot && msg.pdfPath && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"display-button\",\n            onClick: () => handleViewPDFClick(msg.pdfPath),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pdfLabel\",\n              children: \"View Highlighted PDF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 19\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"text-input\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: \"Type your message...\",\n          disabled: isSending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          disabled: isSending,\n          children: isSending ? \"Waiting...\" : \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-link\",\n        children: \"Give us feedback!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotUI, \"RMLPlXGxPi/LGpUnqv/hDLEcHCo=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactMarkdown","axios","config","jsxDEV","_jsxDEV","ChatbotUI","chatID","chats","_s","input","setInput","messages","setMessages","chatHistoryRef","isSending","setIsSending","isBotResponseComplete","setIsBotResponseComplete","fetchMessages","response","get","API_BASE_URL","data","formattedMessages","map","msg","index","id","text","user_query","isBot","agent_response","flat","lastMessage","length","error","console","handleSendMessage","trim","userMessage","Date","now","prev","post","query","user_id","session_id","interval","setInterval","clearInterval","handleViewPDFClick","pdfPath","encodeURIComponent","responseType","blob","Blob","type","url","window","URL","createObjectURL","open","setTimeout","revokeObjectURL","status","alert","handleKeyPress","e","key","shiftKey","preventDefault","current","scrollTop","scrollHeight","className","children","ref","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","target","onKeyPress","placeholder","disabled","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/frontend/doc-manager-ui/src/pages/chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport './chatbot.css';\r\nimport axios from 'axios';\r\nimport config from \"../config\";\r\n\r\nconst ChatbotUI = ({ chatID, chats }) => {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState(chats[chatID] || []);\r\n  const chatHistoryRef = useRef(null);\r\n  const [isSending, setIsSending] = useState(false);\r\n  const [isBotResponseComplete, setIsBotResponseComplete] = useState(false);\r\n\r\n\r\n\r\n    // // Effect to set initial messages\r\n    // useEffect(() => {\r\n    //   if (chatID === null || chatID === \"NONE\") {\r\n    //     setMessages([{ id: Date.now(), text: \"Hello, how can I help you?\", isBot: true }]);\r\n    //   } else {\r\n    //     setMessages(chats[chatID] || []);\r\n    //   }\r\n    // }, [chatID, chats]);\r\n\r\n    const fetchMessages = async () => {\r\n      try {\r\n        const response = await axios.get(`${config.API_BASE_URL}/get_chat_session?user_id=1&session_id=${chatID}`);\r\n        const data = response.data;\r\n  \r\n        // Convert backend conversation to frontend message format\r\n        const formattedMessages = data.map((msg, index) => [\r\n          { \r\n            id: index * 2, \r\n            text: msg.user_query, \r\n            isBot: false \r\n          },\r\n          { \r\n            id: index * 2 + 1, \r\n            text: msg.agent_response, \r\n            isBot: true \r\n          }\r\n        ]).flat();\r\n  \r\n        setMessages(formattedMessages);\r\n  \r\n        // If no bot response is present, set flag as complete\r\n        const lastMessage = data[data.length - 1];\r\n        if (lastMessage && lastMessage.agent_response) {\r\n          setIsBotResponseComplete(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching chat session:', error);\r\n      }\r\n    };\r\n  \r\n    useEffect(() => {\r\n      if (chatID) {\r\n        // Initial fetch for messages when the chatID changes\r\n        fetchMessages();\r\n      }\r\n    }, [chatID]);\r\n\r\n    \r\n\r\n    const handleSendMessage = async () => {\r\n      if (input.trim() === \"\" || isSending) return;\r\n  \r\n      setIsSending(true);\r\n      setIsBotResponseComplete(false); // Reset the response completion status\r\n  \r\n      const userMessage = { id: Date.now(), text: input, isBot: false };\r\n      setMessages((prev) => [...prev, userMessage]);\r\n  \r\n      setInput(\"\");\r\n  \r\n      try {\r\n        await axios.post(`${config.API_BASE_URL}/user_query`, {\r\n          query: input,\r\n          user_id: '1',\r\n          session_id: chatID\r\n        });\r\n  \r\n        // Start polling for bot's response\r\n        const interval = setInterval(async () => {\r\n          if (isBotResponseComplete) {\r\n            clearInterval(interval); // Stop polling when the bot response is complete\r\n          } else {\r\n            fetchMessages(); // Fetch updated chat history\r\n          }\r\n        }, 2000); // Check every 2 seconds (adjust interval as necessary)\r\n  \r\n      } catch (error) {\r\n        console.error(\"Error sending request:\", error);\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          { id: Date.now() + 1, text: \"Sorry, there was an issue processing your request.\", isBot: true },\r\n        ]);\r\n        setIsSending(false); // Stop sending state if error occurs\r\n      }\r\n    };\r\n\r\n\r\n  const handleViewPDFClick = async (pdfPath) => {\r\n    if (!pdfPath) return;\r\n    \r\n    try {\r\n      const response = await axios.get(\r\n        `${config.API_BASE_URL}/get_highlighted_pdf?file_path=${encodeURIComponent(pdfPath)}`,\r\n        {\r\n          responseType: 'blob',\r\n        }\r\n      );\r\n      \r\n      const blob = new Blob([response.data], { type: 'application/pdf' });\r\n      const url = window.URL.createObjectURL(blob);\r\n      \r\n      // Open the PDF in a new tab\r\n      window.open(url, \"_blank\");\r\n      \r\n      // Clean up the URL object after opening\r\n      setTimeout(() => {\r\n        window.URL.revokeObjectURL(url);\r\n      }, 100);\r\n    } catch (error) {\r\n      if (error.response && error.response.status === 404) {\r\n        alert(\"The highlighted PDF has expired. Please make the query again to generate a new highlight.\");\r\n      } else {\r\n        console.error(\"Error fetching PDF:\", error);\r\n        alert(\"Error loading the PDF. Please try again.\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // Scroll to the most recent message\r\n  useEffect(() => {\r\n    if (chatHistoryRef.current) {\r\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n\r\n\r\n\r\n  return (\r\n    <div className=\"chat-interaction-container\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-history\" ref={chatHistoryRef}>\r\n          {messages.length === 0 ? (\r\n            <div className=\"no-messages\">\r\n              HOW CAN I HELP YOU\r\n            </div>\r\n          ) : (\r\n            messages.map((msg) => (\r\n              <div key={msg.id} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\r\n                <ReactMarkdown>{msg.text}</ReactMarkdown>\r\n  \r\n                {msg.isBot && msg.pdfPath && (\r\n                  <button\r\n                    className=\"display-button\"\r\n                    onClick={() => handleViewPDFClick(msg.pdfPath)}\r\n                  >\r\n                    <div className=\"pdfLabel\">View Highlighted PDF</div>\r\n                  </button>\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <textarea\r\n            className=\"text-input\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder=\"Type your message...\"\r\n            disabled={isSending}\r\n          />\r\n          <button className=\"send-button\" onClick={handleSendMessage} disabled={isSending}>\r\n            {isSending ? \"Waiting...\" : \"Send\"}\r\n          </button>\r\n        </div>\r\n        <div className=\"feedback-link\">Give us feedback!</div>\r\n      </div>\r\n    </div>\r\n  );\r\n  \r\n\r\n\r\n};\r\n\r\nexport default ChatbotUI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
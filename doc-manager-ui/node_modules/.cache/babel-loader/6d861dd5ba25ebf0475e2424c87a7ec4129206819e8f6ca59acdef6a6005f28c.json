{"ast":null,"code":"var _jsxFileName = \"/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './sidepanel.css';\nimport SidePanel from './sidepanel'; // Import the SidePanel component\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [chatID, setChatID] = useState(null);\n  const [sessions, setSessions] = useState([]);\n  const [chats, setChats] = useState({});\n  useEffect(() => {\n    // Fetch user sessions when the component mounts\n    fetchUserSessions();\n  }, []);\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/get_user_sessions?user_id=1');\n      const data = await response.json();\n      setSessions(data);\n      if (data.length > 0) {\n        setChatID(data[0].session_id); // Set the first session as the default chat\n      }\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n    }\n  };\n  const handleChatIDChange = newChatID => {\n    setChatID(newChatID);\n    if (newChatID === \"NONE\") {\n      createNewChatSession();\n    } else {\n      fetchChatSession(newChatID);\n    }\n  };\n  const createNewChatSession = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/create_chat_session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: '1'\n        })\n      });\n      const data = await response.json();\n      setChatID(data.session_id);\n      setSessions([...sessions, {\n        user_id: '1',\n        session_id: data.session_id,\n        created_at: new Date().toISOString()\n      }]);\n      setChats({\n        ...chats,\n        [data.session_id]: []\n      });\n    } catch (error) {\n      console.error('Error creating new chat session:', error);\n    }\n  };\n  const fetchChatSession = async sessionID => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get_chat_session?user_id=1&session_id=${sessionID}`);\n      const data = await response.json();\n      setChats({\n        ...chats,\n        [sessionID]: data\n      });\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(SidePanel, {\n      chatID: chatID,\n      setChatID: handleChatIDChange,\n      sessions: sessions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatbotUI, {\n      chatID: chatID,\n      chats: chats\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"pyU5LMIEc9ZgSgIxSHylp9CauWQ=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","SidePanel","ChatbotUI","jsxDEV","_jsxDEV","Main","_s","chatID","setChatID","sessions","setSessions","chats","setChats","fetchUserSessions","response","fetch","data","json","length","session_id","error","console","handleChatIDChange","newChatID","createNewChatSession","fetchChatSession","method","headers","body","JSON","stringify","user_id","created_at","Date","toISOString","sessionID","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport './sidepanel.css';\nimport SidePanel from './sidepanel'; // Import the SidePanel component\nimport ChatbotUI from './chatbot'; // Import the ChatbotUI component\n\nconst Main = () => {\n  const [chatID, setChatID] = useState(null);\n  const [sessions, setSessions] = useState([]);\n  const [chats, setChats] = useState({});\n\n  useEffect(() => {\n    // Fetch user sessions when the component mounts\n    fetchUserSessions();\n  }, []);\n\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/get_user_sessions?user_id=1');\n      const data = await response.json();\n      setSessions(data);\n      if (data.length > 0) {\n        setChatID(data[0].session_id); // Set the first session as the default chat\n      }\n    } catch (error) {\n      console.error('Error fetching user sessions:', error);\n    }\n  };\n\n  const handleChatIDChange = (newChatID) => {\n    setChatID(newChatID);\n    if (newChatID === \"NONE\") {\n      createNewChatSession();\n    } else {\n      fetchChatSession(newChatID);\n    }\n  };\n\n  const createNewChatSession = async () => {\n    try {\n      const response = await fetch('http://127.0.0.1:5000/create_chat_session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ user_id: '1' }),\n      });\n      const data = await response.json();\n      setChatID(data.session_id);\n      setSessions([...sessions, { user_id: '1', session_id: data.session_id, created_at: new Date().toISOString() }]);\n      setChats({ ...chats, [data.session_id]: [] });\n    } catch (error) {\n      console.error('Error creating new chat session:', error);\n    }\n  };\n\n  const fetchChatSession = async (sessionID) => {\n    try {\n      const response = await fetch(`http://127.0.0.1:5000/get_chat_session?user_id=1&session_id=${sessionID}`);\n      const data = await response.json();\n      setChats({ ...chats, [sessionID]: data });\n    } catch (error) {\n      console.error('Error fetching chat session:', error);\n    }\n  };\n\n  return (\n    <div className=\"main-container\">\n      <SidePanel chatID={chatID} setChatID={handleChatIDChange} sessions={sessions} />\n      <ChatbotUI chatID={chatID} chats={chats} />\n    </div>\n  );\n};\n\nexport default Main;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport './chatbot.css';\nimport axios from 'axios';\nimport config from \"../config\";\nimport apiFetch from \"../api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = ({\n  chatID,\n  chats,\n  createNewChatSession,\n  setChats,\n  setChatID\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState(chats[chatID] || []);\n  const chatHistoryRef = useRef(null);\n  const [isSending, setIsSending] = useState(false);\n  const [selectedModel, setSelectedModel] = useState(\"llama3.2:3b\"); // Default model\n  const models = [\"llama3.2:3b\", \"llama3.3:7b\", \"deepseek-r1:1.5b\", \"mistral:7b\"]; // get it from frontend\n\n  const [selectedLanguage, setSelectedLanguage] = useState(\"eng\"); // Default language\n  const languages = [\"eng\", \"tur\"]; // English and Turkish\n\n  const chatIdRef = useRef(chatID);\n  useEffect(() => {\n    chatIdRef.current = chatID;\n  }, [chatID]);\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\" || isSending) return;\n    setIsSending(true);\n    let currentChatId = chatID;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      isBot: false\n    };\n\n    // If chatID is null, create a new chat session\n    if (!currentChatId) {\n      try {\n        currentChatId = await createNewChatSession();\n        if (!currentChatId) {\n          setMessages(prev => [...prev, {\n            id: Date.now() + 1,\n            text: \"Error creating new chat session. Please try again.\",\n            isBot: true\n          }]);\n          setIsSending(false);\n          return;\n        }\n\n        // Ensure we don't overwrite messages with a new array if it already exists\n        setChats(prev => ({\n          ...prev,\n          [currentChatId]: prev[currentChatId] || [] // Only set if it doesn't exist\n        }));\n        setChatID(currentChatId); // Update chat ID state immediately\n      } catch (error) {\n        console.error(\"Error creating new chat session:\", error);\n        setIsSending(false);\n        return;\n      }\n    }\n\n    // Add the user message **only once** (outside session creation logic)\n    setMessages(prev => [...prev, userMessage]);\n    setChats(prev => ({\n      ...prev,\n      [currentChatId]: [...(prev[currentChatId] || []), userMessage] // Ensure it appends correctly\n    }));\n    setInput(\"\");\n    try {\n      const data = await apiFetch(`${config.API_BASE_URL}/user_query`, {\n        method: 'POST',\n        body: JSON.stringify({\n          query: input,\n          user_id: localStorage.getItem(\"userId\"),\n          session_id: currentChatId,\n          model: selectedModel,\n          language: selectedLanguage\n        })\n      });\n      const botResponse = typeof data.response === 'string' ? data.response : JSON.stringify(data.response);\n      const highlightedPdfsource = data.source_docs_arr || null;\n      console.log(data);\n      console.log(highlightedPdfsource);\n      const botMessageId = Date.now() + 1;\n      const botMessage = {\n        id: botMessageId,\n        text: \"\",\n        isBot: true,\n        sources: highlightedPdfsource\n      };\n\n      // Append bot message\n      setMessages(prev => [...prev, botMessage]);\n      setChats(prev => ({\n        ...prev,\n        [currentChatId]: [...prev[currentChatId], botMessage]\n      }));\n\n      // Simulate streaming effect\n      const words = botResponse.split(\" \");\n      for (let i = 0; i < words.length; i++) {\n        await new Promise(resolve => setTimeout(resolve, 50));\n        setMessages(prevMessages => prevMessages.map(msg => msg.id === botMessageId ? {\n          ...msg,\n          text: (msg.text || \"\") + words[i] + \" \"\n        } : msg));\n        setChats(prev => ({\n          ...prev,\n          [currentChatId]: prev[currentChatId].map(msg => msg.id === botMessageId ? {\n            ...msg,\n            text: (msg.text || \"\") + words[i] + \" \"\n          } : msg)\n        }));\n      }\n    } catch (error) {\n      console.error(\"Error sending request:\", error);\n      const errorMessage = {\n        id: Date.now() + 1,\n        text: \"Sorry, there was an issue processing your request.\",\n        isBot: true\n      };\n      setMessages(prev => [...prev, errorMessage]);\n      setChats(prev => ({\n        ...prev,\n        [currentChatId]: [...prev[currentChatId], errorMessage]\n      }));\n    }\n    setIsSending(false);\n  };\n  const handleViewPDFClick = async (pdfPath, pageNumber = 1) => {\n    if (!pdfPath) return;\n    const token = localStorage.getItem('authToken');\n    try {\n      const response = await axios.get(`${config.API_BASE_URL}/get_highlighted_pdf?file_path=${encodeURIComponent(pdfPath)}`, {\n        responseType: 'blob',\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n\n      // Open the PDF in a new tab with the specific page number\n      window.open(`${url}#page=${pageNumber}`, \"_blank\");\n\n      // Clean up the URL object after opening\n      setTimeout(() => {\n        window.URL.revokeObjectURL(url);\n      }, 100);\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        alert(\"The highlighted PDF has expired. Please make the query again to generate a new highlight.\");\n      } else {\n        console.error(\"Error fetching PDF:\", error);\n        alert(\"Error loading the PDF. Please try again.\");\n      }\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSendMessage();\n    }\n  };\n\n  // Scroll to the most recent message\n  useEffect(() => {\n    if (chatHistoryRef.current) {\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\n    }\n  }, [messages]);\n  useEffect(() => {\n    setMessages(chats[chatID] || []);\n  }, [chatID, chats]);\n  const getWelcomeMessage = () => {\n    return selectedLanguage === \"eng\" ? \"Hello! Let me know what you're curious about, and I'll find the relevant documents for you. How can I help you?\" : \"Merhaba! Merak ettiğiniz konuları bana söyleyin, sizin için ilgili dokümanları bulayım. Size nasıl yardımcı olabilirim?\";\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interaction-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"select-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"model-select\",\n            value: selectedModel,\n            onChange: e => setSelectedModel(e.target.value),\n            children: models.map(model => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: model,\n              children: model\n            }, model, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            className: \"language-select\",\n            value: selectedLanguage,\n            onChange: e => setSelectedLanguage(e.target.value),\n            children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: lang,\n              children: lang === \"eng\" ? \"English\" : \"Türkçe\"\n            }, lang, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [\"You are speaking with \\u2728 \", selectedModel, \" \\u2728\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        ref: chatHistoryRef,\n        children: messages.length === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: getWelcomeMessage()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }, this) : messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 17\n          }, this), msg.isBot && msg.sources && msg.sources.length > 0 && msg.sources.filter(source => (source === null || source === void 0 ? void 0 : source.filename) && source.filename !== \"No filename\") // Ensure filename is valid\n          .map((source, index) => /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"display-button\",\n            onClick: () => handleViewPDFClick(source.highlighted_pdf_path, source.pages[0]),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pdfLabel\",\n              children: source.filename\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 244,\n              columnNumber: 23\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 21\n          }, this))]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 233,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"text-input\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          placeholder: selectedLanguage === \"eng\" ? \"Type your message...\" : \"Mesajınızı yazın...\",\n          disabled: isSending\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          disabled: isSending,\n          children: isSending ? selectedLanguage === \"eng\" ? \"Waiting...\" : \"Bekleyin...\" : selectedLanguage === \"eng\" ? \"Send\" : \"Gönder\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-link\",\n        children: /*#__PURE__*/_jsxDEV(\"a\", {\n          href: \"https://docs.google.com/forms/d/e/1FAIpQLSedQob3XPLOoiyA3sLy7jsVG0L3twcE_upSVL7ezV7NSuSVYQ/viewform?usp=header\",\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: selectedLanguage === \"eng\" ? \"Give us feedback!\" : \"Geribildirim verin!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 194,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotUI, \"19TcRVq8KiBXKWWa+4FaU1NJXzM=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactMarkdown","axios","config","apiFetch","jsxDEV","_jsxDEV","ChatbotUI","chatID","chats","createNewChatSession","setChats","setChatID","_s","input","setInput","messages","setMessages","chatHistoryRef","isSending","setIsSending","selectedModel","setSelectedModel","models","selectedLanguage","setSelectedLanguage","languages","chatIdRef","current","handleSendMessage","trim","currentChatId","userMessage","id","Date","now","text","isBot","prev","error","console","data","API_BASE_URL","method","body","JSON","stringify","query","user_id","localStorage","getItem","session_id","model","language","botResponse","response","highlightedPdfsource","source_docs_arr","log","botMessageId","botMessage","sources","words","split","i","length","Promise","resolve","setTimeout","prevMessages","map","msg","errorMessage","handleViewPDFClick","pdfPath","pageNumber","token","get","encodeURIComponent","responseType","headers","blob","Blob","type","url","window","URL","createObjectURL","open","revokeObjectURL","status","alert","handleKeyPress","e","key","shiftKey","preventDefault","scrollTop","scrollHeight","getWelcomeMessage","className","children","value","onChange","target","fileName","_jsxFileName","lineNumber","columnNumber","lang","ref","filter","source","filename","index","onClick","highlighted_pdf_path","pages","onKeyPress","placeholder","disabled","href","rel","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/doc-manager-ui/src/pages/chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport './chatbot.css';\r\nimport axios from 'axios';\r\nimport config from \"../config\";\r\nimport apiFetch from \"../api\";\r\n\r\nconst ChatbotUI = ({ chatID, chats, createNewChatSession, setChats, setChatID }) => {\r\n  const [input, setInput] = useState('');\r\n  const [messages, setMessages] = useState(chats[chatID] || []);\r\n  const chatHistoryRef = useRef(null);\r\n  const [isSending, setIsSending] = useState(false);\r\n\r\n  const [selectedModel, setSelectedModel] = useState(\"llama3.2:3b\"); // Default model\r\n  const models = [\"llama3.2:3b\", \"llama3.3:7b\", \"deepseek-r1:1.5b\", \"mistral:7b\"]; // get it from frontend\r\n\r\n  const [selectedLanguage, setSelectedLanguage] = useState(\"eng\"); // Default language\r\n  const languages = [\"eng\", \"tur\"]; // English and Turkish\r\n\r\n  const chatIdRef = useRef(chatID);\r\n\r\nuseEffect(() => {\r\n  chatIdRef.current = chatID;\r\n}, [chatID]);\r\n\r\n\r\nconst handleSendMessage = async () => {\r\n  if (input.trim() === \"\" || isSending) return;\r\n\r\n  setIsSending(true);\r\n\r\n  let currentChatId = chatID;\r\n  const userMessage = { id: Date.now(), text: input, isBot: false };\r\n\r\n  // If chatID is null, create a new chat session\r\n  if (!currentChatId) {\r\n    try {\r\n      currentChatId = await createNewChatSession();\r\n      if (!currentChatId) {\r\n        setMessages((prev) => [\r\n          ...prev,\r\n          { id: Date.now() + 1, text: \"Error creating new chat session. Please try again.\", isBot: true },\r\n        ]);\r\n        setIsSending(false);\r\n        return;\r\n      }\r\n      \r\n      // Ensure we don't overwrite messages with a new array if it already exists\r\n      setChats(prev => ({\r\n        ...prev,\r\n        [currentChatId]: prev[currentChatId] || []  // Only set if it doesn't exist\r\n      }));\r\n\r\n      setChatID(currentChatId); // Update chat ID state immediately\r\n    } catch (error) {\r\n      console.error(\"Error creating new chat session:\", error);\r\n      setIsSending(false);\r\n      return;\r\n    }\r\n  }\r\n\r\n  // Add the user message **only once** (outside session creation logic)\r\n  setMessages((prev) => [...prev, userMessage]);\r\n  setChats(prev => ({\r\n    ...prev,\r\n    [currentChatId]: [...(prev[currentChatId] || []), userMessage]  // Ensure it appends correctly\r\n  }));\r\n\r\n  setInput(\"\");\r\n\r\n  try {\r\n    const data = await apiFetch(`${config.API_BASE_URL}/user_query`, {\r\n      method: 'POST',\r\n      body: JSON.stringify({\r\n        query: input,\r\n        user_id: localStorage.getItem(\"userId\"),\r\n        session_id: currentChatId,\r\n        model: selectedModel,\r\n        language: selectedLanguage\r\n      })\r\n    });\r\n\r\n    const botResponse = typeof data.response === 'string' ? data.response : JSON.stringify(data.response);\r\n    const highlightedPdfsource= data.source_docs_arr|| null;\r\n    console.log(data);\r\n    console.log(highlightedPdfsource);\r\n\r\n    const botMessageId = Date.now() + 1;\r\n    const botMessage = { id: botMessageId, text: \"\", isBot: true, sources:  highlightedPdfsource };\r\n\r\n    // Append bot message\r\n    setMessages((prev) => [...prev, botMessage]);\r\n    setChats(prev => ({\r\n      ...prev,\r\n      [currentChatId]: [...prev[currentChatId], botMessage]\r\n    }));\r\n\r\n    // Simulate streaming effect\r\n    const words = botResponse.split(\" \");\r\n    for (let i = 0; i < words.length; i++) {\r\n      await new Promise((resolve) => setTimeout(resolve, 50));\r\n\r\n      setMessages((prevMessages) =>\r\n        prevMessages.map((msg) =>\r\n          msg.id === botMessageId ? { ...msg, text: (msg.text || \"\") + words[i] + \" \" } : msg\r\n        )\r\n      );\r\n\r\n      setChats(prev => ({\r\n        ...prev,\r\n        [currentChatId]: prev[currentChatId].map((msg) =>\r\n          msg.id === botMessageId ? { ...msg, text: (msg.text || \"\") + words[i] + \" \" } : msg\r\n        )\r\n      }));\r\n    }\r\n\r\n  } catch (error) {\r\n    console.error(\"Error sending request:\", error);\r\n    const errorMessage = { \r\n      id: Date.now() + 1, \r\n      text: \"Sorry, there was an issue processing your request.\", \r\n      isBot: true \r\n    };\r\n    setMessages((prev) => [...prev, errorMessage]);\r\n    setChats(prev => ({\r\n      ...prev,\r\n      [currentChatId]: [...prev[currentChatId], errorMessage]\r\n    }));\r\n  }\r\n  setIsSending(false);\r\n};\r\n\r\n\r\n\r\nconst handleViewPDFClick = async (pdfPath, pageNumber = 1) => {\r\n  if (!pdfPath) return;\r\n\r\n  const token = localStorage.getItem('authToken');\r\n  \r\n  try {\r\n    const response = await axios.get(\r\n      `${config.API_BASE_URL}/get_highlighted_pdf?file_path=${encodeURIComponent(pdfPath)}`,\r\n      {\r\n        responseType: 'blob',\r\n        headers: {'Authorization': `Bearer ${token}`}\r\n      }\r\n    );\r\n    \r\n    const blob = new Blob([response.data], { type: 'application/pdf' });\r\n    const url = window.URL.createObjectURL(blob);\r\n    \r\n    // Open the PDF in a new tab with the specific page number\r\n    window.open(`${url}#page=${pageNumber}`, \"_blank\");\r\n    \r\n    // Clean up the URL object after opening\r\n    setTimeout(() => {\r\n      window.URL.revokeObjectURL(url);\r\n    }, 100);\r\n  } catch (error) {\r\n    if (error.response && error.response.status === 404) {\r\n      alert(\"The highlighted PDF has expired. Please make the query again to generate a new highlight.\");\r\n    } else {\r\n      console.error(\"Error fetching PDF:\", error);\r\n      alert(\"Error loading the PDF. Please try again.\");\r\n    }\r\n  }\r\n};\r\n\r\n  const handleKeyPress = (e) => {\r\n    if (e.key === 'Enter' && !e.shiftKey) {\r\n      e.preventDefault();\r\n      handleSendMessage();\r\n    }\r\n  };\r\n\r\n  // Scroll to the most recent message\r\n  useEffect(() => {\r\n    if (chatHistoryRef.current) {\r\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  useEffect(() => {\r\n    setMessages(chats[chatID] || []);\r\n  }, [chatID, chats]);\r\n\r\n  const getWelcomeMessage = () => {\r\n    return selectedLanguage === \"eng\" \r\n      ? \"Hello! Let me know what you're curious about, and I'll find the relevant documents for you. How can I help you?\"\r\n      : \"Merhaba! Merak ettiğiniz konuları bana söyleyin, sizin için ilgili dokümanları bulayım. Size nasıl yardımcı olabilirim?\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-interaction-container\">\r\n      <div className=\"chat-container\">\r\n        <div className=\"chat-header\">\r\n          <div className=\"select-container\">\r\n            <select\r\n              className=\"model-select\"\r\n              value={selectedModel}\r\n              onChange={(e) => setSelectedModel(e.target.value)}\r\n            >\r\n              {models.map((model) => (\r\n                <option key={model} value={model}>\r\n                  {model}\r\n                </option>\r\n              ))}\r\n            </select>\r\n\r\n            <select\r\n              className=\"language-select\"\r\n              value={selectedLanguage}\r\n              onChange={(e) => setSelectedLanguage(e.target.value)}\r\n            >\r\n              {languages.map((lang) => (\r\n                <option key={lang} value={lang}>\r\n                  {lang === \"eng\" ? \"English\" : \"Türkçe\"}\r\n                </option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n            You are speaking with ✨ {selectedModel} ✨\r\n          </div>\r\n        </div>\r\n        <div className=\"chat-history\" ref={chatHistoryRef}>\r\n          {messages.length === 0 ? (\r\n            <div className=\"message bot\">\r\n              <ReactMarkdown>{getWelcomeMessage()}</ReactMarkdown> \r\n            </div>\r\n          ) : (\r\n            messages.map((msg) => (\r\n              <div key={msg.id} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\r\n                <ReactMarkdown>{msg.text}</ReactMarkdown>\r\n                {msg.isBot && msg.sources && msg.sources.length > 0 && (\r\n                  msg.sources\r\n                  .filter(source => source?.filename && source.filename !== \"No filename\") // Ensure filename is valid\r\n                  .map((source, index) => (\r\n                    <button\r\n                      key={index}\r\n                      className=\"display-button\"\r\n                      onClick={() => handleViewPDFClick(source.highlighted_pdf_path, source.pages[0])}\r\n                    >\r\n                      <div className=\"pdfLabel\">{source.filename}</div>\r\n                    </button>\r\n                  ))\r\n                )}\r\n              </div>\r\n            ))\r\n          )}\r\n        </div>\r\n        <div className=\"input-container\">\r\n          <textarea\r\n            className=\"text-input\"\r\n            value={input}\r\n            onChange={(e) => setInput(e.target.value)}\r\n            onKeyPress={handleKeyPress}\r\n            placeholder={selectedLanguage === \"eng\" ? \"Type your message...\" : \"Mesajınızı yazın...\"}\r\n            disabled={isSending}\r\n          />\r\n          <button className=\"send-button\" onClick={handleSendMessage} disabled={isSending}>\r\n            {isSending \r\n              ? (selectedLanguage === \"eng\" ? \"Waiting...\" : \"Bekleyin...\") \r\n              : (selectedLanguage === \"eng\" ? \"Send\" : \"Gönder\")}\r\n          </button>\r\n        </div>\r\n        <div className=\"feedback-link\">\r\n          <a href=\"https://docs.google.com/forms/d/e/1FAIpQLSedQob3XPLOoiyA3sLy7jsVG0L3twcE_upSVL7ezV7NSuSVYQ/viewform?usp=header\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n            {selectedLanguage === \"eng\" ? \"Give us feedback!\" : \"Geribildirim verin!\"}\r\n          </a>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ChatbotUI;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./chatbot.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    id: 1,\n    text: \"Hello! How can I assist you today?\",\n    isBot: true\n  }]);\n  const [input, setInput] = useState(\"\");\n  const [isDimVisible, setIsDimVisible] = useState(false); // State for dim overlay visibility\n  const [isPdfVisible, setIsPdfVisible] = useState(false); // State for PDF visibility\n  const [isLoading, setIsLoading] = useState(false); // State for showing loading indicator\n\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    setInput(\"\");\n    setIsLoading(true);\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/user_query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          query: input\n        }) // Send the input as the user query\n      });\n\n      // Ensure response body is available for streaming\n      if (!response.body) throw new Error(\"No response body\");\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = \"\";\n\n      // Read the stream progressively\n      while (true) {\n        const {\n          done,\n          value\n        } = await reader.read();\n        if (done) break;\n\n        // Decode and append the streamed chunk\n        botMessage += decoder.decode(value, {\n          stream: true\n        });\n        setMessages(prev => {\n          const lastBotMessage = prev.find(msg => msg.isBot && msg.id === \"streaming\");\n\n          // Update the streaming message or create a new one\n          if (lastBotMessage) {\n            return prev.map(msg => msg.id === \"streaming\" ? {\n              ...msg,\n              text: botMessage.trim()\n            } : msg);\n          } else {\n            return [...prev, {\n              id: \"streaming\",\n              text: botMessage.trim(),\n              isBot: true\n            }];\n          }\n        });\n      }\n\n      // Finalize the bot's message\n      setMessages(prev => prev.map(msg => msg.id === \"streaming\" ? {\n        ...msg,\n        id: Date.now(),\n        text: botMessage.trim()\n      } : msg));\n    } catch (error) {\n      console.error(\"Error streaming response:\", error);\n      setMessages(prev => [...prev, {\n        id: Date.now(),\n        text: \"Sorry, there was an issue processing your request.\",\n        isBot: true\n      }]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handleViewPDFClick = () => {\n    setIsDimVisible(true); // Show dim overlay when the button is clicked\n    setIsPdfVisible(true); // Show PDF viewer\n  };\n  const handleBackArrowClick = () => {\n    setIsDimVisible(false); // Hide dim overlay when back arrow is clicked\n    setIsPdfVisible(false); // Hide PDF viewer\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"app-container\",\n    children: [isDimVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dim\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"back-arrow-button\",\n        onClick: handleBackArrowClick,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 9\n    }, this), isPdfVisible && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pdf-container\",\n      children: /*#__PURE__*/_jsxDEV(\"iframe\", {\n        src: \"/pdfs/aaa.pdf\" // Assuming the PDF is in the public folder\n        ,\n        title: \"PDF Viewer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-header\",\n        children: \"SUDoc\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        children: [messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? \"bot\" : \"user\"}`,\n          children: [msg.text, msg.isBot && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"display-button\",\n            onClick: handleViewPDFClick,\n            children: \"View PDF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 17\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"message bot\",\n          children: \"Typing...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          className: \"text-input\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotUI, \"B1/NppNiitGUEr4+kZiE3xB82OA=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatbotUI","_s","messages","setMessages","id","text","isBot","input","setInput","isDimVisible","setIsDimVisible","isPdfVisible","setIsPdfVisible","isLoading","setIsLoading","handleSendMessage","trim","userMessage","Date","now","prev","response","fetch","method","headers","body","JSON","stringify","query","Error","reader","getReader","decoder","TextDecoder","botMessage","done","value","read","decode","stream","lastBotMessage","find","msg","map","error","console","handleViewPDFClick","handleBackArrowClick","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","src","title","type","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./chatbot.css\";\n\nconst ChatbotUI = () => {\n  const [messages, setMessages] = useState([\n    { id: 1, text: \"Hello! How can I assist you today?\", isBot: true },\n  ]);\n  const [input, setInput] = useState(\"\");\n  const [isDimVisible, setIsDimVisible] = useState(false); // State for dim overlay visibility\n  const [isPdfVisible, setIsPdfVisible] = useState(false); // State for PDF visibility\n  const [isLoading, setIsLoading] = useState(false); // State for showing loading indicator\n\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n\n    const userMessage = { id: Date.now(), text: input, isBot: false };\n    setMessages((prev) => [...prev, userMessage]);\n    setInput(\"\");\n    setIsLoading(true);\n\n    try {\n      const response = await fetch(\"http://127.0.0.1:5000/user_query\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({ query: input }), // Send the input as the user query\n      });\n\n      // Ensure response body is available for streaming\n      if (!response.body) throw new Error(\"No response body\");\n\n      const reader = response.body.getReader();\n      const decoder = new TextDecoder(\"utf-8\");\n      let botMessage = \"\";\n\n      // Read the stream progressively\n      while (true) {\n        const { done, value } = await reader.read();\n        if (done) break;\n\n        // Decode and append the streamed chunk\n        botMessage += decoder.decode(value, { stream: true });\n        setMessages((prev) => {\n          const lastBotMessage = prev.find(\n            (msg) => msg.isBot && msg.id === \"streaming\"\n          );\n\n          // Update the streaming message or create a new one\n          if (lastBotMessage) {\n            return prev.map((msg) =>\n              msg.id === \"streaming\"\n                ? { ...msg, text: botMessage.trim() }\n                : msg\n            );\n          } else {\n            return [\n              ...prev,\n              { id: \"streaming\", text: botMessage.trim(), isBot: true },\n            ];\n          }\n        });\n      }\n\n      // Finalize the bot's message\n      setMessages((prev) =>\n        prev.map((msg) =>\n          msg.id === \"streaming\"\n            ? { ...msg, id: Date.now(), text: botMessage.trim() }\n            : msg\n        )\n      );\n    } catch (error) {\n      console.error(\"Error streaming response:\", error);\n      setMessages((prev) => [\n        ...prev,\n        {\n          id: Date.now(),\n          text: \"Sorry, there was an issue processing your request.\",\n          isBot: true,\n        },\n      ]);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleViewPDFClick = () => {\n    setIsDimVisible(true); // Show dim overlay when the button is clicked\n    setIsPdfVisible(true); // Show PDF viewer\n  };\n\n  const handleBackArrowClick = () => {\n    setIsDimVisible(false); // Hide dim overlay when back arrow is clicked\n    setIsPdfVisible(false); // Hide PDF viewer\n  };\n\n  return (\n    <div className=\"app-container\">\n      {isDimVisible && (\n        <div className=\"dim\">\n          {/* Back arrow button to restore lights */}\n          <button className=\"back-arrow-button\" onClick={handleBackArrowClick}>\n            ←\n          </button>\n        </div>\n      )}\n\n      {/* PDF Viewer */}\n      {isPdfVisible && (\n        <div className=\"pdf-container\">\n          {/* Using iframe to display the PDF */}\n          <iframe\n            src=\"/pdfs/aaa.pdf\" // Assuming the PDF is in the public folder\n            title=\"PDF Viewer\"\n          ></iframe>\n        </div>\n      )}\n\n      <div className=\"chat-container\">\n        <div className=\"chat-header\">SUDoc</div>\n\n        <div className=\"chat-history\">\n          {messages.map((msg) => (\n            <div\n              key={msg.id}\n              className={`message ${msg.isBot ? \"bot\" : \"user\"}`}\n            >\n              {msg.text}\n\n              {/* Show the button below the chatbot message only */}\n              {msg.isBot && (\n                <button className=\"display-button\" onClick={handleViewPDFClick}>\n                  View PDF\n                </button>\n              )}\n            </div>\n          ))}\n          {isLoading && <div className=\"message bot\">Typing...</div>}\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            className=\"text-input\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button className=\"send-button\" onClick={handleSendMessage}>\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\LENOVO\\\\OneDrive\\\\Masa\\xFCst\\xFC\\\\bitirme\\\\frontend\\\\doc-manager-ui\\\\src\\\\pages\\\\side-panel-options\\\\sidepanelupload.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './sidepanelupload.css'; // Import the CSS file for styling\nimport config from \"../../config\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FileUpload = () => {\n  _s();\n  const [uploadStatus, setUploadStatus] = useState(null); // State to track upload success or error\n  const [isUploading, setIsUploading] = useState(false);\n  const handleFileUpload = async event => {\n    const files = event.target.files; // Get all selected files\n    console.log(\"Files selected:\", files);\n    if (!files || files.length === 0) {\n      setUploadStatus({\n        success: false,\n        message: 'Please select at least one PDF file.'\n      });\n      return;\n    }\n    const formData = new FormData();\n    let validFiles = 0;\n\n    // Append each file to FormData (only PDFs)\n    for (const file of files) {\n      if (file.type === 'application/pdf') {\n        formData.append('files', file); // Append multiple files\n        validFiles++;\n      } else {\n        console.warn(`Skipping invalid file: ${file.name}`);\n      }\n    }\n    if (validFiles === 0) {\n      setUploadStatus({\n        success: false,\n        message: 'Please upload only PDF files.'\n      });\n      return;\n    }\n    try {\n      setIsUploading(true); // Start uploading state\n      console.log('Uploading started...');\n      const token = localStorage.getItem(\"authToken\");\n      const response = await fetch(`${config.API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData,\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      const result = await response.json();\n      console.log('Upload result:', result);\n      if (response.ok) {\n        setUploadStatus({\n          success: true,\n          message: 'Files uploaded successfully!'\n        });\n      } else if (response.status === 403) {\n        setUploadStatus({\n          success: false,\n          message: 'You need to be an admin to upload files'\n        });\n      } else {\n        setUploadStatus({\n          success: false,\n          message: result.error || 'Error uploading the files'\n        });\n      }\n    } catch (error) {\n      console.error('Error uploading files:', error);\n      setUploadStatus({\n        success: false,\n        message: 'Failed to upload files'\n      });\n    } finally {\n      setIsUploading(false); // End uploading state\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"file-upload-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      className: \"upload-button\",\n      children: [isUploading ? 'Uploading...' : 'Choose PDF', /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        accept: \"application/pdf\",\n        onChange: handleFileUpload,\n        hidden: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), uploadStatus && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `upload-feedback ${uploadStatus.success ? 'success' : 'error'}`,\n      children: uploadStatus.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(FileUpload, \"h2mc94/VLCJztOAAA2n75c2Blas=\");\n_c = FileUpload;\nexport default FileUpload;\nvar _c;\n$RefreshReg$(_c, \"FileUpload\");","map":{"version":3,"names":["React","useState","config","jsxDEV","_jsxDEV","FileUpload","_s","uploadStatus","setUploadStatus","isUploading","setIsUploading","handleFileUpload","event","files","target","console","log","length","success","message","formData","FormData","validFiles","file","type","append","warn","name","token","localStorage","getItem","response","fetch","API_BASE_URL","method","body","headers","result","json","ok","status","error","className","children","accept","onChange","hidden","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/LENOVO/OneDrive/Masaüstü/bitirme/frontend/doc-manager-ui/src/pages/side-panel-options/sidepanelupload.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './sidepanelupload.css'; // Import the CSS file for styling\r\nimport config from \"../../config\";\r\n\r\nconst FileUpload = () => {\r\n  const [uploadStatus, setUploadStatus] = useState(null); // State to track upload success or error\r\n  const [isUploading, setIsUploading] = useState(false);\r\n\r\n  const handleFileUpload = async (event) => {\r\n    const files = event.target.files; // Get all selected files\r\n    console.log(\"Files selected:\", files);\r\n\r\n    if (!files || files.length === 0) {\r\n        setUploadStatus({ success: false, message: 'Please select at least one PDF file.' });\r\n        return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    let validFiles = 0;\r\n\r\n    // Append each file to FormData (only PDFs)\r\n    for (const file of files) {\r\n        if (file.type === 'application/pdf') {\r\n            formData.append('files', file); // Append multiple files\r\n            validFiles++;\r\n        } else {\r\n            console.warn(`Skipping invalid file: ${file.name}`);\r\n        }\r\n    }\r\n\r\n    if (validFiles === 0) {\r\n        setUploadStatus({ success: false, message: 'Please upload only PDF files.' });\r\n        return;\r\n    }\r\n\r\n    try {\r\n        setIsUploading(true); // Start uploading state\r\n        console.log('Uploading started...');\r\n\r\n        const token = localStorage.getItem(\"authToken\");\r\n        const response = await fetch(`${config.API_BASE_URL}/upload`, {\r\n            method: 'POST',\r\n            body: formData,\r\n            headers: { 'Authorization': `Bearer ${token}` }\r\n        });\r\n\r\n        const result = await response.json();\r\n        console.log('Upload result:', result);\r\n\r\n        if (response.ok) {\r\n            setUploadStatus({ success: true, message: 'Files uploaded successfully!' });\r\n        } else if (response.status === 403) {\r\n            setUploadStatus({ success: false, message: 'You need to be an admin to upload files' });\r\n        } else {\r\n            setUploadStatus({ success: false, message: result.error || 'Error uploading the files' });\r\n        }\r\n    } catch (error) {\r\n        console.error('Error uploading files:', error);\r\n        setUploadStatus({ success: false, message: 'Failed to upload files' });\r\n    } finally {\r\n        setIsUploading(false); // End uploading state\r\n    }\r\n};\r\n\r\n  return (\r\n    <div className=\"file-upload-container\">\r\n\r\n      <label className=\"upload-button\">\r\n        {isUploading ? 'Uploading...' : 'Choose PDF'}\r\n        <input type=\"file\" accept=\"application/pdf\" onChange={handleFileUpload} hidden />\r\n      </label>\r\n\r\n      {/* Feedback message */}\r\n      {uploadStatus && (\r\n        <div\r\n          className={`upload-feedback ${uploadStatus.success ? 'success' : 'error'}`}\r\n        >\r\n          {uploadStatus.message}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\n \r\nexport default FileUpload;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
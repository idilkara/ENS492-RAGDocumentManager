{"ast":null,"code":"var _jsxFileName = \"/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/Main.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport ChatbotUI from './chatbot';\nimport SidePanel from './sidepanel';\nimport './Main.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Main = () => {\n  _s();\n  const [chatID, setChatID] = useState(\"NONE\"); // Shared state for selected chat\n  const [sessions, setSessions] = useState([]); // State for storing all sessions\n\n  // Fetch user sessions when the component mounts\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/get_user_sessions?user_id=1');\n      const data = await response.json();\n      if (response.ok) {\n        setSessions(data); // Set the sessions data\n      } else {\n        console.error('Error fetching sessions:', data.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  useEffect(() => {\n    fetchUserSessions();\n  }, []);\n\n  // Create new chat session\n  const createNewChat = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/create_chat_session', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          user_id: '1'\n        }) // Pass the actual user ID\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setChatID(data.session_id); // Set the new session ID\n        fetchUserSessions(); // Fetch and update the list of user sessions\n      } else {\n        console.error('Error creating chat session:', data.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // Dummy chats to simulate a session\n  const dummyChats = {\n    \"NONE\": [{\n      id: 1,\n      text: \"Hello! How can I assist you today?\",\n      isBot: true\n    }]\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-panel\",\n      children: /*#__PURE__*/_jsxDEV(SidePanel, {\n        chatID: chatID,\n        setChatID: setChatID,\n        createNewChat: createNewChat,\n        sessions: sessions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-panel\",\n      children: /*#__PURE__*/_jsxDEV(ChatbotUI, {\n        chatID: chatID,\n        chats: dummyChats\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(Main, \"uI3o30l9jftUQIOY8HFrPoZRf1w=\");\n_c = Main;\nexport default Main;\nvar _c;\n$RefreshReg$(_c, \"Main\");","map":{"version":3,"names":["React","useState","useEffect","ChatbotUI","SidePanel","jsxDEV","_jsxDEV","Main","_s","chatID","setChatID","sessions","setSessions","fetchUserSessions","response","fetch","data","json","ok","console","error","createNewChat","method","headers","body","JSON","stringify","user_id","session_id","dummyChats","id","text","isBot","className","children","fileName","_jsxFileName","lineNumber","columnNumber","chats","_c","$RefreshReg$"],"sources":["/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/Main.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport ChatbotUI from './chatbot';\nimport SidePanel from './sidepanel';\nimport './Main.css';\n\nconst Main = () => {\n  const [chatID, setChatID] = useState(\"NONE\"); // Shared state for selected chat\n  const [sessions, setSessions] = useState([]); // State for storing all sessions\n\n  // Fetch user sessions when the component mounts\n  const fetchUserSessions = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/get_user_sessions?user_id=1');\n      const data = await response.json();\n      if (response.ok) {\n        setSessions(data);  // Set the sessions data\n      } else {\n        console.error('Error fetching sessions:', data.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  useEffect(() => {\n    fetchUserSessions();\n  }, []);\n\n  // Create new chat session\n  const createNewChat = async () => {\n    try {\n      const response = await fetch('http://localhost:5000/create_chat_session', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ user_id: '1' }), // Pass the actual user ID\n      });\n\n      const data = await response.json();\n      if (response.ok) {\n        setChatID(data.session_id); // Set the new session ID\n        fetchUserSessions(); // Fetch and update the list of user sessions\n      } else {\n        console.error('Error creating chat session:', data.error);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // Dummy chats to simulate a session\n  const dummyChats = {\n    \"NONE\": [{ id: 1, text: \"Hello! How can I assist you today?\", isBot: true }],\n  };\n\n  return (\n    <div className=\"main-container\">\n      {/* Pass chatID and setChatID to both components */}\n      <div className=\"left-panel\">\n        <SidePanel chatID={chatID} setChatID={setChatID} createNewChat={createNewChat} sessions={sessions} />\n      </div>\n      <div className=\"right-panel\">\n        <ChatbotUI chatID={chatID} chats={dummyChats} />\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
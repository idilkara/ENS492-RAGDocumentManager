{"ast":null,"code":"var _jsxFileName = \"/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport './chatbot.css';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatbotUI = ({\n  chatID,\n  chats\n}) => {\n  _s();\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState(chats[chatID] || []);\n  const chatHistoryRef = useRef(null); // Create a reference for the chat container\n\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n    const userMessage = {\n      id: Date.now(),\n      text: input,\n      isBot: false\n    };\n    setMessages(prev => [...prev, userMessage]);\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/user_query\", {\n        query: input\n      });\n      const data = response.data;\n      const botResponse = typeof data.response === 'string' ? data.response : JSON.stringify(data.response);\n      const gridfs_id = data.gridfs_id || null; // Use gridfs_id\n\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        text: botResponse,\n        isBot: true,\n        gridfs_id: gridfs_id // Store gridfs_id separately for the \"View PDF\" button\n      }]);\n    } catch (error) {\n      console.error(\"Error sending request:\", error);\n      setMessages(prev => [...prev, {\n        id: Date.now() + 1,\n        text: \"Sorry, there was an issue processing your request.\",\n        isBot: true\n      }]);\n    }\n    setInput(\"\");\n  };\n  const handleViewPDFClick = async gridfs_id => {\n    if (!gridfs_id) return;\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/get_highlighted_pdf?gridfs_id=${encodeURIComponent(gridfs_id)}`, {\n        responseType: 'blob'\n      });\n      const blob = new Blob([response.data], {\n        type: 'application/pdf'\n      });\n      const url = window.URL.createObjectURL(blob);\n\n      // Open the PDF in a new tab\n      window.open(url, \"_blank\");\n    } catch (error) {\n      console.error(\"Error fetching PDF:\", error);\n    }\n  };\n\n  // Scroll to the most recent message\n  useEffect(() => {\n    if (chatHistoryRef.current) {\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\n    }\n  }, [messages]); // Triggered whenever messages are updated\n\n  useEffect(() => {\n    setMessages(chats[chatID] || []);\n  }, [chatID, chats]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-interaction-container\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat-history\",\n        ref: chatHistoryRef,\n        children: messages.map(msg => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `message ${msg.isBot ? 'bot' : 'user'}`,\n          children: [/*#__PURE__*/_jsxDEV(ReactMarkdown, {\n            children: msg.text\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 15\n          }, this), msg.isBot && msg.gridfs_id && /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"display-button\",\n            onClick: () => handleViewPDFClick(msg.gridfs_id),\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"pdfLabel\",\n              children: \"View PDF\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, msg.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"input-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          type: \"text\",\n          className: \"text-input\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          placeholder: \"Type your message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"send-button\",\n          onClick: handleSendMessage,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"feedback-link\",\n        children: \"Give us feedback!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 77,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatbotUI, \"fWn3plV7rcoUU0IEJAe7tIdh5PA=\");\n_c = ChatbotUI;\nexport default ChatbotUI;\nvar _c;\n$RefreshReg$(_c, \"ChatbotUI\");","map":{"version":3,"names":["React","useState","useRef","useEffect","ReactMarkdown","axios","jsxDEV","_jsxDEV","ChatbotUI","chatID","chats","_s","input","setInput","messages","setMessages","chatHistoryRef","handleSendMessage","trim","userMessage","id","Date","now","text","isBot","prev","response","post","query","data","botResponse","JSON","stringify","gridfs_id","error","console","handleViewPDFClick","get","encodeURIComponent","responseType","blob","Blob","type","url","window","URL","createObjectURL","open","current","scrollTop","scrollHeight","className","children","ref","map","msg","fileName","_jsxFileName","lineNumber","columnNumber","onClick","value","onChange","e","target","placeholder","_c","$RefreshReg$"],"sources":["/Users/idily/Desktop/ens-frontend/sudoc-docs/doc-manager-ui/src/pages/chatbot.js"],"sourcesContent":["import React, { useState, useRef, useEffect } from \"react\";\nimport ReactMarkdown from \"react-markdown\";\nimport './chatbot.css';\nimport axios from 'axios';\n\nconst ChatbotUI = ({ chatID, chats }) => {\n  const [input, setInput] = useState('');\n  const [messages, setMessages] = useState(chats[chatID] || []);\n\n  const chatHistoryRef = useRef(null); // Create a reference for the chat container\n\n  const handleSendMessage = async () => {\n    if (input.trim() === \"\") return;\n\n    const userMessage = { id: Date.now(), text: input, isBot: false };\n    setMessages((prev) => [...prev, userMessage]);\n    try {\n      const response = await axios.post(\"http://127.0.0.1:5000/user_query\", {\n        query: input\n      });\n\n      const data = response.data;\n      const botResponse = typeof data.response === 'string' ? data.response : JSON.stringify(data.response);\n      const gridfs_id = data.gridfs_id || null; // Use gridfs_id\n\n      setMessages((prev) => [\n        ...prev,\n        {\n          id: Date.now() + 1,\n          text: botResponse,\n          isBot: true,\n          gridfs_id: gridfs_id, // Store gridfs_id separately for the \"View PDF\" button\n        },\n      ]);\n\n    } catch (error) {\n      console.error(\"Error sending request:\", error);\n      setMessages((prev) => [\n        ...prev,\n        { id: Date.now() + 1, text: \"Sorry, there was an issue processing your request.\", isBot: true },\n      ]);\n    }\n\n    setInput(\"\");\n  };\n\n  const handleViewPDFClick = async (gridfs_id) => {\n    if (!gridfs_id) return;\n\n    try {\n      const response = await axios.get(`http://127.0.0.1:5000/get_highlighted_pdf?gridfs_id=${encodeURIComponent(gridfs_id)}`, {\n        responseType: 'blob',\n      });\n\n      const blob = new Blob([response.data], { type: 'application/pdf' });\n      const url = window.URL.createObjectURL(blob);\n\n      // Open the PDF in a new tab\n      window.open(url, \"_blank\");\n    } catch (error) {\n      console.error(\"Error fetching PDF:\", error);\n    }\n  };\n\n  // Scroll to the most recent message\n  useEffect(() => {\n    if (chatHistoryRef.current) {\n      chatHistoryRef.current.scrollTop = chatHistoryRef.current.scrollHeight;\n    }\n  }, [messages]); // Triggered whenever messages are updated\n\n  useEffect(() => {\n    setMessages(chats[chatID] || []);\n  }, [chatID, chats]);\n\n  return (\n    <div className=\"chat-interaction-container\">\n      <div className=\"chat-container\">\n        <div className=\"chat-history\" ref={chatHistoryRef}>\n          {messages.map((msg) => (\n            <div key={msg.id} className={`message ${msg.isBot ? 'bot' : 'user'}`}>\n              <ReactMarkdown>{msg.text}</ReactMarkdown>\n              {msg.isBot && msg.gridfs_id && (\n                <button className=\"display-button\" onClick={() => handleViewPDFClick(msg.gridfs_id)}>\n                  <div className=\"pdfLabel\">View PDF</div>\n                </button>\n              )}\n            </div>\n          ))}\n        </div>\n        <div className=\"input-container\">\n          <textarea\n            type=\"text\"\n            className=\"text-input\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button className=\"send-button\" onClick={handleSendMessage}>\n            Send\n          </button>\n        </div>\n        <div className=\"feedback-link\">Give us feedback!</div>\n      </div>\n    </div>\n  );\n};\n\nexport default ChatbotUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}